APP .JS :

import { StatusBar } from 'expo-status-bar';
import { Button, StyleSheet, Text, TextInput, View, Alert} from 'react-native';
import { useState } from 'react';

import { db } from './firebase';
import { collection, addDoc } from 'firebase/firestore';
import { initializeApp } from 'firebase/app';
import {
  getAuth,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
} from 'firebase/auth';

import { doc, setDoc, getDoc } from 'firebase/firestore';

const auth = getAuth(); // Firebase Authentication


export default function App() {


  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [name, setName] = useState('');



  const handleSignUp = async () => {
    try {
      // Firebase Authentication ile kullanıcı kaydı
      const userCredential = await createUserWithEmailAndPassword(
        auth,
        email,
        password
      );
      const userId = userCredential.user.uid;

      // Firestore'daki "users" koleksiyonuna profil ekleme
      await setDoc(doc(db, 'users', userId), {
        email: email,
        name: name,
        createdAt: new Date(),
      });

      Alert.alert('Başarılı!', 'Kullanıcı kaydedildi ve profil oluşturuldu.');
      setEmail('');
      setPassword('');
      setName('');
    } catch (error) {
      console.error('Error signing up: ', error);
      Alert.alert('Hata!', error.message);
    }
  };




  
  const [isim, setisim] = useState('');
  // SADECE İSİM EKLEME-DENEME AMAÇLI
  const addUserToFirestore = async () => {
    try {
      // Firestore'daki "users" koleksiyonuna veri ekleme
      const docRef = await addDoc(collection(db, 'users'), {
        name: isim, // TextInput'tan alınan değer
        createdAt: new Date(), // Ek bilgi için tarih ekleyebilirsiniz
      });

      Alert.alert('Başarılı!', `Kullanıcı eklendi: ${docRef.id}`);
      setisim(''); // TextInput'u sıfırla
    } catch (error) {
      console.error('Error adding document: ', error);
      Alert.alert('Hata!', 'Kullanıcı eklenemedi.');
    }
  };



  const handleLogin = async () => {
    try {
      const userCredential = await signInWithEmailAndPassword(
        auth,
        email,
        password
      );
      const userId = userCredential.user.uid;

      // Firestore'dan kullanıcı profili çekme
      const userDoc = await getDoc(doc(db, 'users', userId));
      if (userDoc.exists()) {
        const userData = userDoc.data();
        Alert.alert(
          'Giriş Başarılı',
          `Hoş geldiniz, ${userData.name}! Email: ${userData.email}`
        );
      } else {
        Alert.alert('Hata!', 'Kullanıcı profili bulunamadı.');
      }

      setEmail('');
      setPassword('');
    } catch (error) {
      console.error('Error logging in: ', error);
      Alert.alert('Hata!', error.message);
    }
  };




  return (
    <View style={styles.container}>
      <TextInput
        style={{
          height: 40,
          borderColor: 'gray',
          borderWidth: 1,
          marginBottom: 10,
          paddingHorizontal: 10,
        }}
        placeholder="Adınızı girin"
        value={isim}
        onChangeText={text => setisim(text)} // Metni state'e kaydet
      />
      <Button title="Ekle" onPress={addUserToFirestore} />
      <StatusBar style="auto" />


      <TextInput
        style={{
          height: 40,
          borderColor: 'gray',
          borderWidth: 1,
          marginBottom: 10,
          paddingHorizontal: 10,
        }}
        placeholder="İsim"
        value={name}
        onChangeText={(text) => setName(text)}
      />
      <TextInput
        style={{
          height: 40,
          borderColor: 'gray',
          borderWidth: 1,
          marginBottom: 10,
          paddingHorizontal: 10,
        }}
        placeholder="Email"
        value={email}
        onChangeText={(text) => setEmail(text)}
      />
      <TextInput
        style={{
          height: 40,
          borderColor: 'gray',
          borderWidth: 1,
          marginBottom: 10,
          paddingHorizontal: 10,
        }}
        placeholder="Şifre"
        secureTextEntry
        value={password}
        onChangeText={(text) => setPassword(text)}
      />
      <Button title="Kayıt Ol" onPress={handleSignUp} />
      <View style={{ height: 10 }} />
      <Button title="Giriş Yap" onPress={handleLogin} />




    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});
******************************
SAFEAREA PROVIDER
import { StyleSheet, Text, View,StatusBar } from 'react-native'
import React from 'react'
import { SafeAreaView,SafeAreaProvider } from 'react-native-safe-area-context'

const Photo = () => {
  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Text>Home EKRANI GELDİ</Text>
      </SafeAreaView>
    </SafeAreaProvider>
  )
}

export default Photo

const styles = StyleSheet.create({
    container:{
        flex:1,
        backgroundColor:"yellow"
        
    }
})


****************** photo.js*************

import React, { useState } from "react";
import { View, Button, Image, Alert, StyleSheet, Text } from "react-native";
import * as ImagePicker from "expo-image-picker";

const Photo = () => {
  const [image, setImage] = useState(null);
  const [result, setResult] = useState(null);

  // Resim seçme işlemi
  const pickImage = async () => {
    // Galeriye erişim izni iste
    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
    if (status !== "granted") {
      Alert.alert(
        "Permission Denied",
        "We need access to your gallery to select an image."
      );
      return;
    }

    // Galeriden resim seç
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images, // Sadece resimleri seç
      allowsEditing: true, // Kullanıcıya kırpma seçeneği sun
      quality: 1, // Resim kalitesini koru
    });

    if (!result.canceled) {
      setImage(result.assets[0].uri); // Seçilen resmin URI'sini kaydet
    }
  };

  // Seçilen resmi API'ye gönder ve tahmin al
  const uploadImage = async () => {
    if (!image) {
      Alert.alert("No Image", "Please select an image first.");
      return;
    }

    const formData = new FormData();
    formData.append("file", {
      uri: image,
      name: "image.jpg",
      type: "image/jpeg",
    });

    try {
      const response = await fetch("https://fastapi-backend-3-q9m9.onrender.com/predict/", {
        method: "POST",
        body: formData,
        headers: {
          "Content-Type": "multipart/form-data",
        },
      });

      const result = await response.json();
      setResult(result);
    } catch (error) {
      console.error(error);
      Alert.alert("Error", "Failed to upload image.");
    }
  };

  return (
    <View style={styles.container}>
      <Button title="Select Image" onPress={pickImage} />
      {image && <Image source={{ uri: image }} style={styles.image} />}
      {image && <Button title="Upload & Predict" onPress={uploadImage} />}
      {result && (
        <View style={styles.resultContainer}>
          <Text style={styles.resultText}>
            Predicted Class: {result.predicted_class_name}
          </Text>
          <Text style={styles.resultText}>Confidence: {result.confidence}</Text>
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 20,
  },
  image: {
    width: 200,
    height: 200,
    marginVertical: 20,
  },
  resultContainer: {
    marginTop: 20,
    alignItems: "center",
  },
  resultText: {
    fontSize: 16,
    fontWeight: "bold",
  },
});

export default Photo;


********profile.js**********
import React from 'react';
import { View, Text, Button, StyleSheet, Alert } from 'react-native';
import { signOut } from 'firebase/auth';
import { auth } from '../../../firebase';

const Profile = () => {
  const handleSignOut = async () => {
    try {
      await signOut(auth); // Firebase çıkış işlemi
      Alert.alert('Çıkış Yapıldı', 'Başarıyla çıkış yaptınız!');
    } catch (error) {
      Alert.alert('Hata', 'Çıkış yapılırken bir hata oluştu.');
      console.error(error);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.text}>Profil Sayfası</Text>
      <Button title="Çıkış Yap" onPress={handleSignOut} />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'white',
  },
  text: {
    fontSize: 20,
    marginBottom: 20,
  },
});

export default Profile;
************************ photo en sonki 11.12.24*****
import React, { useState } from "react";
import { View, Button, Image, Alert, StyleSheet, Text } from "react-native";
import * as ImagePicker from "expo-image-picker";
import { getStorage, ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { collection, addDoc, query, where, getDocs } from "firebase/firestore";
import { db } from "../../../firebase"; // Firestore bağlantısını import ediyoruz
import { getAuth } from "firebase/auth";

const Photo = () => {


  const auth = getAuth();
  const currentUser = auth.currentUser;

  if (!currentUser) {
    console.error("No user is logged in.");
    return <Text>Error: No user is logged in.</Text>;
  }

  const userEmail = currentUser.email; // Oturum açmış kullanıcının e-posta adresi
  console.log("User Email from Firebase Auth:", userEmail);



  const [image, setImage] = useState(null);
  const [result, setResult] = useState(null);

  // Kullanıcının Firestore belgesini e-posta ile bulma
  const getUserDocumentByEmail = async (email) => {
    const usersRef = collection(db, "users");
    const q = query(usersRef, where("email", "==", email));
    const querySnapshot = await getDocs(q);

    if (querySnapshot.empty) {
      throw new Error("User not found");
    }

    return querySnapshot.docs[0].ref;
  };

  // Resim seçme işlemi
  const pickImage = async () => {
    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
    if (status !== "granted") {
      Alert.alert(
        "Permission Denied",
        "We need access to your gallery to select an image."
      );
      return;
    }

    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      quality: 1,
    });

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  // Firebase'e fotoğraf yükleme ve tahmin sonuçlarını kaydetme
  const uploadImage = async () => {
    if (!image) {
      Alert.alert("No Image", "Please select an image first.");
      return;
    }

    const storage = getStorage();
    const filename = image.substring(image.lastIndexOf("/") + 1);
    const storageRef = ref(storage, `user_images/${filename}`);

    try {
      // Firebase Storage'a resmi yükleme
      const response = await fetch(image);
      const blob = await response.blob();
      await uploadBytes(storageRef, blob);
      const imageUrl = await getDownloadURL(storageRef);

      // Tahmin işlemi
      const formData = new FormData();
      formData.append("file", {
        uri: image,
        name: "image.jpg",
        type: "image/jpeg",
      });

      const apiResponse = await fetch(
        "https://fastapi-backend-3-q9m9.onrender.com/predict/",
        {
          method: "POST",
          body: formData,
          headers: {
            "Content-Type": "multipart/form-data",
          },
        }
      );

      const predictionResult = await apiResponse.json();
      setResult(predictionResult);

      // Firestore'a tahmin sonuçlarını kaydetme
      await savePredictionToFirestore(userEmail, imageUrl, predictionResult);

      setImage(null);
      setResult(null);
      Alert.alert("Success", "Prediction completed and state reset.");

    } catch (error) {
      console.error("Error during upload or save:", error);
      Alert.alert("Error", "An error occurred while uploading the image.");
    }
  };

  const savePredictionToFirestore = async (userEmail, imageUrl, predictionResult) => {
    try {
      // Kullanıcının belgesine e-posta ile ulaş
      const userRef = await getUserDocumentByEmail(userEmail);

      // predictions alt koleksiyonuna referans
      const predictionsRef = collection(userRef, "predictions");

      // Yeni tahmin ekle
      await addDoc(predictionsRef, {
        imageUrl: imageUrl,
        result: predictionResult.predicted_class_name,
        confidence: predictionResult.confidence,
        timestamp: new Date(),
      });

      Alert.alert("Success", "Prediction saved successfully.");
    } catch (error) {
      console.error("Error saving prediction to Firestore:", error);
      Alert.alert("Error", "Failed to save prediction.");
    }
  };


  console.log("Received userEmail:", userEmail);

  return (
    <View style={styles.container}>
      <Button title="Select Image" onPress={pickImage} />
      {image && <Image source={{ uri: image }} style={styles.image} />}
      {image && <Button title="Upload & Predict" onPress={uploadImage} />}
      {result && (
        <View style={styles.resultContainer}>
          <Text style={styles.resultText}>
            Predicted Class: {result.predicted_class_name}
          </Text>
          <Text style={styles.resultText}>Confidence: {result.confidence}</Text>
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 20,
  },
  image: {
    width: 200,
    height: 200,
    marginVertical: 20,
  },
  resultContainer: {
    marginTop: 20,
    alignItems: "center",
  },
  resultText: {
    fontSize: 16,
    fontWeight: "bold",
  },
});

export default Photo;
----------profile----------
import React, { useEffect, useState } from "react";
import { View, Text, StyleSheet, Alert, Image, FlatList } from "react-native";
import { collection, query, where, onSnapshot, doc,getDocs} from "firebase/firestore";
import { db } from "../../../firebase";
import { getAuth } from "firebase/auth";
import Loading from "../../components/Loading";

const Profile = () => {



  const auth = getAuth();
  const currentUser = auth.currentUser;

  if (!currentUser) {
    console.error("No user is logged in.");
    return <Text>Error: No user is logged in.</Text>;
  }

  const userEmail = currentUser.email; // Oturum açmış kullanıcının e-posta adresi
  console.log("User Email from Firebase Auth:", userEmail)

  const [predictions, setPredictions] = useState([]);

  const getUserIdByEmail = async (email) => {
    const usersRef = collection(db, "users");
    const q = query(usersRef, where("email", "==", email));
    const querySnapshot = await getDocs(q);

    if (querySnapshot.empty) {
      throw new Error("No user found with the given email");
    }

    return querySnapshot.docs[0].id; // Belge ID'si (userId)
  };

  useEffect(() => {
    let unsubscribe; // Dinleyiciyi sonlandırmak için referans

    const subscribeToPredictions = async () => {
      try {
        // Kullanıcı ID'sini email'e göre bul
        const userId = await getUserIdByEmail(userEmail);

        // predictions alt koleksiyonuna eriş
        const predictionsRef = collection(db, "users", userId, "predictions");

        // Firestore realtime listener
        unsubscribe = onSnapshot(predictionsRef, (snapshot) => {
          const updatedPredictions = [];
          snapshot.forEach((doc) => {
            updatedPredictions.push({ id: doc.id, ...doc.data() });
          });
          setPredictions(updatedPredictions);
        });
      } catch (error) {
        console.error("Error fetching predictions:", error);
        Alert.alert("Error", "Failed to fetch predictions.");
      }
    };

    subscribeToPredictions();

    // Cleanup: Dinleyiciyi kaldır
    return () => {
      if (unsubscribe) {
        unsubscribe();
      }
    };
  }, [userEmail]);

  const renderPrediction = ({ item }) => (
    <View style={styles.card}>
      <Image source={{ uri: item.imageUrl }} style={styles.image} />
      <Text style={styles.resultText}>Class: {item.result}</Text>
      <Text style={styles.resultText}>
        Confidence: {item.confidence.toFixed(2)}
      </Text>
      <Text style={styles.timestamp}>
        Date: {new Date(item.timestamp?.seconds * 1000).toLocaleString()}
      </Text>
    </View>
  );

  return (
    <View style={styles.container}>
      <Text style={styles.text}>Tahminler</Text>
      <FlatList
        data={predictions}
        keyExtractor={(item) => item.id}
        renderItem={renderPrediction}
        ListEmptyComponent={<Loading/>}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: "white",
  },
  text: {
    fontSize: 20,
    marginBottom: 20,
    textAlign: "center",
  },
  card: {
    backgroundColor: "#f0f0f0",
    padding: 15,
    marginVertical: 10,
    borderRadius: 10,
    borderWidth: 1,
    alignItems: "center",
  },
  image: {
    width: 200,
    height: 200,
    marginBottom: 10,
    borderRadius: 10,
  },
  resultText: {
    fontSize: 16,
    fontWeight: "bold",
    marginBottom: 5,
  },
  timestamp: {
    fontSize: 14,
    color: "gray",
  },
});

export default Profile;
********* photo son hali***********
import React, { useState } from "react";
import { View, Alert, StyleSheet, Text, TouchableOpacity, Image } from "react-native";
import * as ImagePicker from "expo-image-picker";
import { getStorage, ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { collection, addDoc, query, where, getDocs } from "firebase/firestore";
import { db } from "../../../firebase"; // Firestore bağlantısını import ediyoruz
import { getAuth } from "firebase/auth";
import Icon from "react-native-vector-icons/FontAwesome";
import TahminEdiliyor from "../../components/TahminEdiliyor"

const Photo = () => {
  const auth = getAuth();
  const currentUser = auth.currentUser;

  if (!currentUser) {
    console.error("No user is logged in.");
    return <Text>Error: No user is logged in.</Text>;
  }

  const userEmail = currentUser.email; // Oturum açmış kullanıcının e-posta adresi
  console.log("User Email from Firebase Auth:", userEmail);

  const [image, setImage] = useState(null);
  const [result, setResult] = useState(null);
  const [loading, setloading] = useState(false)

  // Galeriden resim seçme işlemi
  const pickImage = async () => {
    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
    if (status !== "granted") {
      Alert.alert(
        "Permission Denied",
        "We need access to your gallery to select an image."
      );
      return;
    }

    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ["images"],
      allowsEditing: true,
      quality: 1,
    });

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  // Kameradan fotoğraf çekme işlemi
  const takePhoto = async () => {
    const { status } = await ImagePicker.requestCameraPermissionsAsync();
    if (status !== "granted") {
      Alert.alert(
        "Permission Denied",
        "We need access to your camera to take a photo."
      );
      return;
    }

    const result = await ImagePicker.launchCameraAsync({
      mediaTypes: ["images"],
      allowsEditing: true,
      quality: 1,
    });

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  if(loading){
    return <TahminEdiliyor/>
  }



  // Resmi yükle ve tahmin işlemi yap
  const uploadAndPredict = async () => {

    setloading(true)

    if (!image) {
      Alert.alert("No Image", "Please select or capture an image first.");
      return;
    }

    const storage = getStorage();
    const filename = image.substring(image.lastIndexOf("/") + 1);
    const storageRef = ref(storage, `user_images/${filename}`);

    try {
      // Firebase Storage'a resmi yükle
      const response = await fetch(image);
      const blob = await response.blob();
      await uploadBytes(storageRef, blob);
      const imageUrl = await getDownloadURL(storageRef);

      // API'ye resmi gönder ve tahmin al
      const formData = new FormData();
      formData.append("file", {
        uri: image,
        name: "image.jpg",
        type: "image/jpeg",
      });

      const apiResponse = await fetch(
        "https://fastapi-backend-3-q9m9.onrender.com/predict/",
        {
          method: "POST",
          body: formData,
          headers: {
            "Content-Type": "multipart/form-data",
          },
        }
      );

      const predictionResult = await apiResponse.json();
      setResult(predictionResult);

      // Tahmin sonuçlarını veritabanına kaydet
      await savePredictionToFirestore(userEmail, imageUrl, predictionResult);
      setloading(false)
      Alert.alert("Success", "Prediction completed!");
    } catch (error) {
      console.error("Error during upload or predict:", error);
      Alert.alert("Error", "An error occurred while processing the image.");
    }
  };

  const savePredictionToFirestore = async (userEmail, imageUrl, predictionResult) => {
    try {
      const usersRef = collection(db, "users");
      const q = query(usersRef, where("email", "==", userEmail));
      const querySnapshot = await getDocs(q);

      if (querySnapshot.empty) {
        throw new Error("User not found");
      }

      const userDocRef = querySnapshot.docs[0].ref;
      const predictionsRef = collection(userDocRef, "predictions");

      await addDoc(predictionsRef, {
        imageUrl: imageUrl,
        result: predictionResult.predicted_class_name,
        confidence: predictionResult.confidence,
        timestamp: new Date(),
      });
    } catch (error) {
      console.error("Error saving prediction to Firestore:", error);
      Alert.alert("Error", "Failed to save prediction.");
    }
  };

  return (
    <View style={styles.container}>
      <TouchableOpacity style={styles.button} onPress={pickImage}>
        <Icon name="upload" size={50} color="#FFF" style={styles.icon} />
        <Text style={styles.buttonText}>Select from Gallery</Text>
      </TouchableOpacity>

      <TouchableOpacity style={[styles.button, styles.cameraButton]} onPress={takePhoto}>
        <Icon name="camera" size={50} color="#FFF" style={styles.icon} />
        <Text style={styles.buttonText}>Take Photo</Text>
      </TouchableOpacity>

      {image && (
        <>
          <Image source={{ uri: image }} style={styles.image} />
          <TouchableOpacity style={[styles.button, styles.predictButton]} onPress={uploadAndPredict}>
            <Icon name="cloud-upload" size={50} color="#FFF" style={styles.icon} />
            <Text style={styles.buttonText}>Upload & Predict</Text>
          </TouchableOpacity>
        </>
      )}

      {result && (
        <View style={styles.resultCard}>
          <Text style={styles.resultText}>Class: {result.predicted_class_name}</Text>
          <Text style={styles.resultText}>Confidence: {result.confidence.toFixed(2)}</Text>
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 20,
    backgroundColor: "#F0F4F8",
  },
  button: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "#5FC9C4",
    width: "80%",
    paddingVertical: 15,
    borderRadius: 10,
    marginBottom: 20,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 5,
    elevation: 3,
  },
  cameraButton: {
    backgroundColor: "#A47EDE",
  },
  predictButton: {
    backgroundColor: "#FF8C00",
    marginTop: 20,
  },
  icon: {
    marginRight: 10,
  },
  buttonText: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#FFF",
  },
  image: {
    width: 200,
    height: 200,
    marginTop: 20,
    borderRadius: 10,
  },
  resultCard: {
    marginTop: 20,
    padding: 15,
    backgroundColor: "#FFF",
    borderRadius: 10,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 5,
    elevation: 3,
    alignItems: "center",
    width: "80%",
  },
  resultText: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
  },
});

export default Photo;
****************PHOTO 17.12***********
import React, { useState } from "react";
import { View, Alert, StyleSheet, Text, TouchableOpacity, Image } from "react-native";
import * as ImagePicker from "expo-image-picker";
import { getStorage, ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { collection, addDoc, query, where, getDocs } from "firebase/firestore";
import { db } from "../../../firebase"; // Firestore bağlantısını import ediyoruz
import { getAuth } from "firebase/auth";
import Icon from "react-native-vector-icons/FontAwesome";
import TahminEdiliyor from "../../components/TahminEdiliyor"

const Photo = () => {
  const auth = getAuth();
  const currentUser = auth.currentUser;

  if (!currentUser) {
    console.error("No user is logged in.");
    return <Text>Error: No user is logged in.</Text>;
  }

  const userEmail = currentUser.email; // Oturum açmış kullanıcının e-posta adresi
  console.log("User Email from Firebase Auth:", userEmail);

  const [image, setImage] = useState(null);
  const [result, setResult] = useState(null);
  const [loading, setloading] = useState(false)

  // Galeriden resim seçme işlemi
  const pickImage = async () => {
    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
    if (status !== "granted") {
      Alert.alert(
        "Permission Denied",
        "We need access to your gallery to select an image."
      );
      return;
    }

    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ["images"],
      allowsEditing: true,
      quality: 1,
    });

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  // Kameradan fotoğraf çekme işlemi
  const takePhoto = async () => {
    const { status } = await ImagePicker.requestCameraPermissionsAsync();
    if (status !== "granted") {
      Alert.alert(
        "Permission Denied",
        "We need access to your camera to take a photo."
      );
      return;
    }

    const result = await ImagePicker.launchCameraAsync({
      mediaTypes: ["images"],
      allowsEditing: true,
      quality: 1,
    });

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  if(loading){
    return <TahminEdiliyor/>
  }



  // Resmi yükle ve tahmin işlemi yap
  const uploadAndPredict = async () => {

    setloading(true)

    if (!image) {
      Alert.alert("No Image", "Please select or capture an image first.");
      return;
    }

    const storage = getStorage();
    const filename = image.substring(image.lastIndexOf("/") + 1);
    const storageRef = ref(storage, `user_images/${filename}`);

    try {
      // Firebase Storage'a resmi yükle
      const response = await fetch(image);
      const blob = await response.blob();
      await uploadBytes(storageRef, blob);
      const imageUrl = await getDownloadURL(storageRef);

      // API'ye resmi gönder ve tahmin al
      const formData = new FormData();
      formData.append("file", {
        uri: image,
        name: "image.jpg",
        type: "image/jpeg",
      });

      const apiResponse = await fetch(
        "https://fastapi-backend-3-q9m9.onrender.com/predict/",
        {
          method: "POST",
          body: formData,
          headers: {
            "Content-Type": "multipart/form-data",
          },
        }
      );

      const predictionResult = await apiResponse.json();
      setResult(predictionResult);

      // Tahmin sonuçlarını veritabanına kaydet
      await savePredictionToFirestore(userEmail, imageUrl, predictionResult);
      setloading(false)
      Alert.alert("Success", "Prediction completed!");
    } catch (error) {
      console.error("Error during upload or predict:", error);
      Alert.alert("Error", "An error occurred while processing the image.");
    }
  };

  const savePredictionToFirestore = async (userEmail, imageUrl, predictionResult) => {
    try {
      const usersRef = collection(db, "users");
      const q = query(usersRef, where("email", "==", userEmail));
      const querySnapshot = await getDocs(q);

      if (querySnapshot.empty) {
        throw new Error("User not found");
      }

      const userDocRef = querySnapshot.docs[0].ref;
      const predictionsRef = collection(userDocRef, "predictions");

      await addDoc(predictionsRef, {
        imageUrl: imageUrl,
        result: predictionResult.predicted_class_name,
        confidence: predictionResult.confidence,
        timestamp: new Date(),
      });
    } catch (error) {
      console.error("Error saving prediction to Firestore:", error);
      Alert.alert("Error", "Failed to save prediction.");
    }
  };

  return (
    <View style={styles.container}>
      <TouchableOpacity style={styles.button} onPress={pickImage}>
        <Icon name="upload" size={50} color="#FFF" style={styles.icon} />
        <Text style={styles.buttonText}>Select from Gallery</Text>
      </TouchableOpacity>

      <TouchableOpacity style={[styles.button, styles.cameraButton]} onPress={takePhoto}>
        <Icon name="camera" size={50} color="#FFF" style={styles.icon} />
        <Text style={styles.buttonText}>Take Photo</Text>
      </TouchableOpacity>

      {image && (
        <>
          <Image source={{ uri: image }} style={styles.image} />
          <TouchableOpacity style={[styles.button, styles.predictButton]} onPress={uploadAndPredict}>
            <Icon name="cloud-upload" size={50} color="#FFF" style={styles.icon} />
            <Text style={styles.buttonText}>Upload & Predict</Text>
          </TouchableOpacity>
        </>
      )}

      {result && (
        <View style={styles.resultCard}>
          <Text style={styles.resultText}>Class: {result.predicted_class_name}</Text>
          <Text style={styles.resultText}>Confidence: {result.confidence.toFixed(2)}</Text>
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 20,
    backgroundColor: "#F0F4F8",
  },
  button: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "#5FC9C4",
    width: "80%",
    paddingVertical: 15,
    borderRadius: 10,
    marginBottom: 20,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 5,
    elevation: 3,
  },
  cameraButton: {
    backgroundColor: "#A47EDE",
  },
  predictButton: {
    backgroundColor: "#FF8C00",
    marginTop: 20,
  },
  icon: {
    marginRight: 10,
  },
  buttonText: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#FFF",
  },
  image: {
    width: 200,
    height: 200,
    marginTop: 20,
    borderRadius: 10,
  },
  resultCard: {
    marginTop: 20,
    padding: 15,
    backgroundColor: "#FFF",
    borderRadius: 10,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 5,
    elevation: 3,
    alignItems: "center",
    width: "80%",
  },
  resultText: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
  },
});

export default Photo;
******PHOTO****import React, { useState } from "react";
import { View, Alert, StyleSheet, Text, TouchableOpacity, Image } from "react-native";
import * as ImagePicker from "expo-image-picker";
import { getStorage, ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { collection, addDoc, query, where, getDocs } from "firebase/firestore";
import { db } from "../../../firebase"; // Firestore bağlantısını import ediyoruz
import { getAuth } from "firebase/auth";
import Icon from "react-native-vector-icons/FontAwesome";
import TahminEdiliyor from "../../components/TahminEdiliyor";

const Photo = () => {
  const auth = getAuth();
  const currentUser = auth.currentUser;

  if (!currentUser) {
    console.error("No user is logged in.");
    return <Text>Error: No user is logged in.</Text>;
  }

  const userEmail = currentUser.email; // Oturum açmış kullanıcının e-posta adresi
  console.log("User Email from Firebase Auth:", userEmail);

  const [image, setImage] = useState(null);
  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(false);

  // Kullanıcı uyarısı
  const showWarningAndProceed = async (action) => {
    Alert.alert(
      "Uyarı",
      "Tahmin işlemleri kesinlikle doğru sonuç olmayabilir. Lütfen yetkili birimlere başvurmayı unutmayınız.",
      [
        {
          text: "Tamam",
          onPress: action, // Kullanıcı Tamam'a bastığında işlem devam eder
        },
      ],
      { cancelable: true }
    );
  };

  // Galeriden resim seçme işlemi
  const pickImage = async () => {
    const proceed = async () => {
      const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
      if (status !== "granted") {
        Alert.alert(
          "Permission Denied",
          "We need access to your gallery to select an image."
        );
        return;
      }

      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        quality: 1,
      });

      if (!result.canceled) {
        setImage(result.assets[0].uri);
      }
    };

    showWarningAndProceed(proceed);
  };

  // Kameradan fotoğraf çekme işlemi
  const takePhoto = async () => {
    const proceed = async () => {
      const { status } = await ImagePicker.requestCameraPermissionsAsync();
      if (status !== "granted") {
        Alert.alert(
          "Permission Denied",
          "We need access to your camera to take a photo."
        );
        return;
      }

      const result = await ImagePicker.launchCameraAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        quality: 1,
      });

      if (!result.canceled) {
        setImage(result.assets[0].uri);
      }
    };

    showWarningAndProceed(proceed);
  };

  if (loading) {
    return <TahminEdiliyor />;
  }

  return (
    <View style={styles.container}>
      <TouchableOpacity style={styles.button} onPress={pickImage}>
        <Icon name="upload" size={50} color="#FFF" style={styles.icon} />
        <Text style={styles.buttonText}>Select from Gallery</Text>
      </TouchableOpacity>

      <TouchableOpacity style={[styles.button, styles.cameraButton]} onPress={takePhoto}>
        <Icon name="camera" size={50} color="#FFF" style={styles.icon} />
        <Text style={styles.buttonText}>Take Photo</Text>
      </TouchableOpacity>

      {image && (
        <>
          <Image source={{ uri: image }} style={styles.image} />
          <TouchableOpacity style={[styles.button, styles.predictButton]} onPress={uploadAndPredict}>
            <Icon name="cloud-upload" size={50} color="#FFF" style={styles.icon} />
            <Text style={styles.buttonText}>Upload & Predict</Text>
          </TouchableOpacity>
        </>
      )}

      {result && (
        <View style={styles.resultCard}>
          <Text style={styles.resultText}>Class: {result.predicted_class_name}</Text>
          <Text style={styles.resultText}>Confidence: {result.confidence.toFixed(2)}</Text>
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 20,
    backgroundColor: "#F0F4F8",
  },
  button: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "#5FC9C4",
    width: "80%",
    paddingVertical: 15,
    borderRadius: 10,
    marginBottom: 20,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 5,
    elevation: 3,
  },
  cameraButton: {
    backgroundColor: "#A47EDE",
  },
  predictButton: {
    backgroundColor: "#FF8C00",
    marginTop: 20,
  },
  icon: {
    marginRight: 10,
  },
  buttonText: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#FFF",
  },
  image: {
    width: 200,
    height: 200,
    marginTop: 20,
    borderRadius: 10,
  },
  resultCard: {
    marginTop: 20,
    padding: 15,
    backgroundColor: "#FFF",
    borderRadius: 10,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 5,
    elevation: 3,
    alignItems: "center",
    width: "80%",
  },
  resultText: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
  },
});

export default Photo;

****** MODAL KULLANIMI****
import React, { useState } from "react";
import {
  View,
  Alert,
  StyleSheet,
  Text,
  TouchableOpacity,
  Image,
  FlatList,
  Modal,
} from "react-native";
import * as ImagePicker from "expo-image-picker";
import Icon from "react-native-vector-icons/FontAwesome";

const Photo = () => {
  const [image, setImage] = useState(null);
  const [result, setResult] = useState(null);
  const [modalVisible, setModalVisible] = useState(false);

  // Meyve Listesi
  const fruitList = [
    { id: "1", name: "Elma", image: require("../../../assets/icons/apple.png") },
    { id: "2", name: "Üzüm", image: require("../../../assets/icons/grape.png") },
    { id: "3", name: "Kiraz", image: require("../../../assets/icons/cherries.png") },
    { id: "4", name: "Dolma Biber", image: require("../../../assets/icons/food-and-restaurant.png") },
    { id: "5", name: "Kahve", image: require("../../../assets/icons/coffee-beans.png") },
    { id: "6", name: "Mısır", image: require("../../../assets/icons/corn.png") },
    { id: "7", name: "Pamuk", image: require("../../../assets/icons/cotton.png") },
    { id: "8", name: "Şeftali", image: require("../../../assets/icons/peach.png") },
    { id: "9", name: "Patates", image: require("../../../assets/icons/potato.png") },
    { id: "10", name: "Pirinç", image: require("../../../assets/icons/rice.png") },
    { id: "11", name: "Çilek", image: require("../../../assets/icons/strawberry.png") },
    { id: "12", name: "Şeker Kamışı", image: require("../../../assets/icons/sugarcane.png") },
    { id: "13", name: "Domates", image: require("../../../assets/icons/tomato.png") },
    { id: "14", name: "Bal Kabağı", image: require("../../../assets/icons/food.png") },
  ];

  const renderFruit = ({ item }) => (
    <View style={styles.fruitItem}>
      <Image source={item.image} style={styles.fruitImage} />
      <Text style={styles.fruitName}>{item.name}</Text>
    </View>
  );

  return (
    <View style={styles.container}>
      {/* Galeri ve Kamera Butonları */}
      <TouchableOpacity style={styles.button}>
        <Icon name="upload" size={50} color="#FFF" style={styles.icon} />
        <Text style={styles.buttonText}>Select from Gallery</Text>
      </TouchableOpacity>

      <TouchableOpacity style={[styles.button, styles.cameraButton]}>
        <Icon name="camera" size={50} color="#FFF" style={styles.icon} />
        <Text style={styles.buttonText}>Take Photo</Text>
      </TouchableOpacity>

      {/* Info Butonu */}
      <TouchableOpacity
        style={styles.infoButton}
        onPress={() => setModalVisible(true)}
      >
        <Icon name="info" size={20} color="#FFF" />
      </TouchableOpacity>

      {/* Modal */}
      <Modal
        visible={modalVisible}
        animationType="slide"
        transparent={true}
        onRequestClose={() => setModalVisible(false)}
      >
        <View style={styles.modalContainer}>
          <Text style={styles.modalTitle}>Tüm bitki çeşitlerimiz şunlardır:</Text>
          <FlatList
            data={fruitList}
            keyExtractor={(item) => item.id}
            renderItem={renderFruit}
          />
          <TouchableOpacity
            style={styles.closeButton}
            onPress={() => setModalVisible(false)}
          >
            <Text style={styles.closeButtonText}>Kapat</Text>
          </TouchableOpacity>
        </View>
      </Modal>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#F0F4F8",
    padding: 20,
  },
  button: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "#5FC9C4",
    width: "80%",
    paddingVertical: 15,
    borderRadius: 10,
    marginBottom: 20,
  },
  cameraButton: {
    backgroundColor: "#A47EDE",
  },
  icon: {
    marginRight: 10,
  },
  buttonText: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#FFF",
  },
  infoButton: {
    position: "absolute",
    bottom: 50,
    right: 20,
    backgroundColor: "#FF8C00",
    width: 50,
    height: 50,
    justifyContent: "center",
    alignItems: "center",
    borderRadius: 25,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 5,
    elevation: 3,
  },
  modalContainer: {
    flex: 1,
    backgroundColor: "#FFF",
    marginTop: "30%",
    marginHorizontal: "5%",
    borderRadius: 20,
    padding: 20,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 10,
    elevation: 5,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: "bold",
    marginBottom: 20,
    textAlign: "center",
  },
  fruitItem: {
    flexDirection: "row",
    alignItems: "center",
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: "#E0E0E0",
  },
  fruitImage: {
    width: 40,
    height: 40,
    marginRight: 15,
  },
  fruitName: {
    fontSize: 16,
  },
  closeButton: {
    marginTop: 20,
    alignSelf: "center",
    backgroundColor: "#FF5C5C",
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 10,
  },
  closeButtonText: {
    color: "#FFF",
    fontSize: 16,
    fontWeight: "bold",
  },
});

export default Photo;

************PHOTO SON *******
import React, { useState } from "react";
import { View, Alert, StyleSheet, Text, TouchableOpacity, Image ,Modal,FlatList} from "react-native";
import * as ImagePicker from "expo-image-picker";
import { getStorage, ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { collection, addDoc, query, where, getDocs } from "firebase/firestore";
import { db } from "../../../firebase"; // Firestore bağlantısını import ediyoruz
import { getAuth } from "firebase/auth";
import Icon from "react-native-vector-icons/FontAwesome";
import TahminEdiliyor from "../../components/TahminEdiliyor";

const Photo = () => {
  const auth = getAuth();
  const currentUser = auth.currentUser;

  if (!currentUser) {
    console.error("No user is logged in.");
    return <Text>Error: No user is logged in.</Text>;
  }

  const userEmail = currentUser.email; // Oturum açmış kullanıcının e-posta adresi
  console.log("User Email from Firebase Auth:", userEmail);

  const [image, setImage] = useState(null);
  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);


   // Meyve Listesi
   const fruitList = [
    { id: "1", name: "Elma", image: require("../../../assets/icons/apple.png") },
    { id: "2", name: "Üzüm", image: require("../../../assets/icons/grape.png") },
    { id: "3", name: "Kiraz", image: require("../../../assets/icons/cherries.png") },
    { id: "4", name: "Dolma Biber", image: require("../../../assets/icons/food-and-restaurant.png") },
    { id: "5", name: "Kahve", image: require("../../../assets/icons/coffee-beans.png") },
    { id: "6", name: "Mısır", image: require("../../../assets/icons/corn.png") },
    { id: "7", name: "Pamuk", image: require("../../../assets/icons/cotton.png") },
    { id: "8", name: "Şeftali", image: require("../../../assets/icons/peach.png") },
    { id: "9", name: "Patates", image: require("../../../assets/icons/potato.png") },
    { id: "10", name: "Pirinç", image: require("../../../assets/icons/rice.png") },
    { id: "11", name: "Çilek", image: require("../../../assets/icons/strawberry.png") },
    { id: "12", name: "Şeker Kamışı", image: require("../../../assets/icons/sugarcane.png") },
    { id: "13", name: "Domates", image: require("../../../assets/icons/tomato.png") },
    { id: "14", name: "Bal Kabağı", image: require("../../../assets/icons/food.png") },
  ];

  const renderFruit = ({ item }) => (
    <View style={styles.fruitItem}>
      <Image source={item.image} style={styles.fruitImage} />
      <Text style={styles.fruitName}>{item.name}</Text>
    </View>
  );




  // Kullanıcı uyarısı
  const showWarningAndProceed = async (action) => {
    Alert.alert(
      "Uyarı",
      "Tahmin işlemleri kesinlikle doğru sonuç olmayabilir. Lütfen yetkili birimlere başvurmayı unutmayınız.",
      [
        {
          text: "Tamam",
          onPress: action, // Kullanıcı Tamam'a bastığında işlem devam eder
        },
      ],
      { cancelable: true }
    );
  };

  // Galeriden resim seçme işlemi
  const pickImage = async () => {
    const proceed = async () => {
      const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
      if (status !== "granted") {
        Alert.alert(
          "Permission Denied",
          "We need access to your gallery to select an image."
        );
        return;
      }

      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ["images"],
        allowsEditing: true,
        quality: 1,
      });

      if (!result.canceled) {
        setImage(result.assets[0].uri);
      }
    };

    showWarningAndProceed(proceed);
  };

  // Kameradan fotoğraf çekme işlemi
  const takePhoto = async () => {
    const proceed = async () => {
      const { status } = await ImagePicker.requestCameraPermissionsAsync();
      if (status !== "granted") {
        Alert.alert(
          "Permission Denied",
          "We need access to your camera to take a photo."
        );
        return;
      }

      const result = await ImagePicker.launchCameraAsync({
        mediaTypes: ["images"],
        allowsEditing: true,
        quality: 1,
      });

      if (!result.canceled) {
        setImage(result.assets[0].uri);
      }
    };

    showWarningAndProceed(proceed);
  };

  if (loading) {
    return <TahminEdiliyor />;
  }


  // Resmi yükle ve tahmin işlemi yap
  const uploadAndPredict = async () => {

    setLoading(true)

    if (!image) {
      Alert.alert("No Image", "Please select or capture an image first.");
      return;
    }

    const storage = getStorage();
    const filename = image.substring(image.lastIndexOf("/") + 1);
    const storageRef = ref(storage, `user_images/${filename}`);

    try {
      // Firebase Storage'a resmi yükle
      const response = await fetch(image);
      const blob = await response.blob();
      await uploadBytes(storageRef, blob);
      const imageUrl = await getDownloadURL(storageRef);

      // API'ye resmi gönder ve tahmin al
      const formData = new FormData();
      formData.append("file", {
        uri: image,
        name: "image.jpg",
        type: "image/jpeg",
      });

      const apiResponse = await fetch(
        "https://fastapi-backend-3-q9m9.onrender.com/predict/",
        {
          method: "POST",
          body: formData,
          headers: {
            "Content-Type": "multipart/form-data",
          },
        }
      );

      const predictionResult = await apiResponse.json();
      setResult(predictionResult);

      // Tahmin sonuçlarını veritabanına kaydet
      await savePredictionToFirestore(userEmail, imageUrl, predictionResult);
      setLoading(false)
      
      Alert.alert("Success", "Prediction completed!");
      
    } catch (error) {
      console.error("Error during upload or predict:", error);
      Alert.alert("Error", "An error occurred while processing the image.");
    }
  };

  const savePredictionToFirestore = async (userEmail, imageUrl, predictionResult) => {
    try {
      const usersRef = collection(db, "users");
      const q = query(usersRef, where("email", "==", userEmail));
      const querySnapshot = await getDocs(q);

      if (querySnapshot.empty) {
        throw new Error("User not found");
      }

      const userDocRef = querySnapshot.docs[0].ref;
      const predictionsRef = collection(userDocRef, "predictions");

      await addDoc(predictionsRef, {
        imageUrl: imageUrl,
        result: predictionResult.predicted_class_name,
        confidence: predictionResult.confidence,
        timestamp: new Date(),
      });
    } catch (error) {
      console.error("Error saving prediction to Firestore:", error);
      Alert.alert("Error", "Failed to save prediction.");
    }
  };

  return (
    <View style={styles.container}>
      <TouchableOpacity style={styles.button} onPress={pickImage}>
        <Icon name="upload" size={50} color="#FFF" style={styles.icon} />
        <Text style={styles.buttonText}>Select from Gallery</Text>
      </TouchableOpacity>

      <TouchableOpacity style={[styles.button, styles.cameraButton]} onPress={takePhoto}>
        <Icon name="camera" size={50} color="#FFF" style={styles.icon} />
        <Text style={styles.buttonText}>Take Photo</Text>
      </TouchableOpacity>


      {/* Info Butonu */}
      <TouchableOpacity
        style={styles.infoButton}
        onPress={() => setModalVisible(true)}
      >
        <Icon name="info" size={20} color="#FFF" />
      </TouchableOpacity>

      {/* Modal */}
      <Modal
        visible={modalVisible}
        animationType="slide"
        transparent={true}
        onRequestClose={() => setModalVisible(false)}
      >
        <View style={styles.modalContainer}>
          <Text style={styles.modalTitle}>Tüm bitki çeşitlerimiz şunlardır:</Text>
          <FlatList
            data={fruitList}
            keyExtractor={(item) => item.id}
            renderItem={renderFruit}
          />
          <TouchableOpacity
            style={styles.closeButton}
            onPress={() => setModalVisible(false)}
          >
            <Text style={styles.closeButtonText}>Kapat</Text>
          </TouchableOpacity>
        </View>
      </Modal>


      {image && (
        <>
          <Image source={{ uri: image }} style={styles.image} />
          <TouchableOpacity style={[styles.button, styles.predictButton]} onPress={uploadAndPredict}>
            <Icon name="cloud-upload" size={50} color="#FFF" style={styles.icon} />
            <Text style={styles.buttonText}>Tahmin Et</Text>
          </TouchableOpacity>
        </>
      )}

      {result && (
        <View style={styles.resultCard}>
          <Text style={styles.resultText}>Sınıf: {result.predicted_class_name}</Text>
          <Text style={styles.resultText}>Güvenilirlik: {result.confidence.toFixed(2)}</Text>
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 20,
    backgroundColor: "#F0F4F8",
  },
  button: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "#5FC9C4",
    width: "80%",
    paddingVertical: 15,
    borderRadius: 10,
    marginBottom: 20,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 5,
    elevation: 3,
  },
  cameraButton: {
    backgroundColor: "#A47EDE",
  },
  predictButton: {
    backgroundColor: "#FF8C00",
    marginTop: 20,
  },
  icon: {
    marginRight: 10,
  },
  buttonText: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#FFF",
  },
  image: {
    width: 200,
    height: 200,
    marginTop: 20,
    borderRadius: 20,
  },
  resultCard: {
    marginTop: 20,
    padding: 15,
    backgroundColor: "#FFF",
    borderRadius: 10,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 5,
    elevation: 3,
    alignItems: "center",
    width: "80%",
  },
  resultText: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
  },

  infoButton: {
    position: "absolute",
    bottom: 50,
    right: 20,
    backgroundColor: "#FF8C00",
    width: 50,
    height: 50,
    justifyContent: "center",
    alignItems: "center",
    borderRadius: 25,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 5,
    elevation: 3,
  },
  modalContainer: {
    flex: 1,
    backgroundColor: "#FFF",
    marginTop: "30%",
    marginHorizontal: "5%",
    borderRadius: 20,
    padding: 20,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 10,
    elevation: 5,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: "bold",
    marginBottom: 20,
    textAlign: "center",
  },
  fruitItem: {
    flexDirection: "row",
    alignItems: "center",
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: "#E0E0E0",
  },
  fruitImage: {
    width: 40,
    height: 40,
    marginRight: 15,
  },
  fruitName: {
    fontSize: 16,
  },
  closeButton: {
    marginTop: 20,
    alignSelf: "center",
    backgroundColor: "#FF5C5C",
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 10,
  },
  closeButtonText: {
    color: "#FFF",
    fontSize: 16,
    fontWeight: "bold",
  },



});

export default Photo;




{image && (
  <>
    {/* Tahmin Et Butonu */}
    <TouchableOpacity
      style={[styles.button, styles.predictButton]}
      onPress={uploadAndPredict}
    >
      <Icon name="cloud-upload" size={50} color="#FFF" style={styles.icon} />
      <Text style={styles.buttonText}>Tahmin Et</Text>
    </TouchableOpacity>

    {/* Seçilen Resim */}
    <Image source={{ uri: image }} style={styles.image} />

    {/* Tahmin Sonuçları */}
    {result && (
      <View style={styles.resultCard}>
        <Text style={styles.resultText}>Sınıf: {result.predicted_class_name}</Text>
        <Text style={styles.resultText}>
          Güvenilirlik: {result.confidence.toFixed(2)}
        </Text>
      </View>
    )}
  </>
)}


************ photo *********
import React, { useState } from "react";
import { View, Alert, StyleSheet, Text, TouchableOpacity, Image ,Modal,FlatList} from "react-native";
import * as ImagePicker from "expo-image-picker";
import { getStorage, ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { collection, addDoc, query, where, getDocs } from "firebase/firestore";
import { db } from "../../../firebase"; // Firestore bağlantısını import ediyoruz
import { getAuth } from "firebase/auth";
import Icon from "react-native-vector-icons/FontAwesome";
import TahminEdiliyor from "../../components/TahminEdiliyor";

const Photo = ({navigation}) => {
  const auth = getAuth();
  const currentUser = auth.currentUser;

  if (!currentUser) {
    console.error("No user is logged in.");
    return <Text>Error: No user is logged in.</Text>;
  }

  const userEmail = currentUser.email; // Oturum açmış kullanıcının e-posta adresi
  console.log("User Email from Firebase Auth:", userEmail);

  const [image, setImage] = useState(null);
  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);


   // Meyve Listesi
   const fruitList = [
    { id: "1", name: "Elma", image: require("../../../assets/icons/apple.png") },
    { id: "2", name: "Üzüm", image: require("../../../assets/icons/grape.png") },
    { id: "3", name: "Kiraz", image: require("../../../assets/icons/cherries.png") },
    { id: "4", name: "Dolma Biber", image: require("../../../assets/icons/food-and-restaurant.png") },
    { id: "5", name: "Kahve", image: require("../../../assets/icons/coffee-beans.png") },
    { id: "6", name: "Mısır", image: require("../../../assets/icons/corn.png") },
    { id: "7", name: "Pamuk", image: require("../../../assets/icons/cotton.png") },
    { id: "8", name: "Şeftali", image: require("../../../assets/icons/peach.png") },
    { id: "9", name: "Patates", image: require("../../../assets/icons/potato.png") },
    { id: "10", name: "Pirinç", image: require("../../../assets/icons/rice.png") },
    { id: "11", name: "Çilek", image: require("../../../assets/icons/strawberry.png") },
    { id: "12", name: "Şeker Kamışı", image: require("../../../assets/icons/sugarcane.png") },
    { id: "13", name: "Domates", image: require("../../../assets/icons/tomato.png") },
    { id: "14", name: "Bal Kabağı", image: require("../../../assets/icons/food.png") },
  ];

  const renderFruit = ({ item }) => (
    <View style={styles.fruitItem}>
      <Image source={item.image} style={styles.fruitImage} />
      <Text style={styles.fruitName}>{item.name}</Text>
    </View>
  );




  // Kullanıcı uyarısı
  const showWarningAndProceed = async (action) => {
    Alert.alert(
      "Uyarı",
      "Tahmin işlemleri kesinlikle doğru sonuç olmayabilir. Lütfen yetkili birimlere başvurmayı unutmayınız.",
      [
        {
          text: "Tamam",
          onPress: action, // Kullanıcı Tamam'a bastığında işlem devam eder
        },
      ],
      { cancelable: true }
    );
  };

  // Galeriden resim seçme işlemi
  const pickImage = async () => {
    const proceed = async () => {
      const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
      if (status !== "granted") {
        Alert.alert(
          "Permission Denied",
          "We need access to your gallery to select an image."
        );
        return;
      }

      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ["images"],
        allowsEditing: true,
        quality: 1,
      });

      if (!result.canceled) {
        setImage(result.assets[0].uri);
      }
    };

    showWarningAndProceed(proceed);
  };

  // Kameradan fotoğraf çekme işlemi
  const takePhoto = async () => {
    const proceed = async () => {
      const { status } = await ImagePicker.requestCameraPermissionsAsync();
      if (status !== "granted") {
        Alert.alert(
          "İzin reddedildi",
          "Fotoğraf çekmek için kamera iznine ihtiyacımız var!"
        );
        return;
      }

      const result = await ImagePicker.launchCameraAsync({
        mediaTypes: ["images"],
        allowsEditing: true,
        quality: 1,
      });

      if (!result.canceled) {
        setImage(result.assets[0].uri);
      }
    };

    showWarningAndProceed(proceed);
  };

  if (loading) {
    return <TahminEdiliyor />;
  }


  // Resmi yükle ve tahmin işlemi yap
  const uploadAndPredict = async () => {

    setLoading(true)

    if (!image) {
      Alert.alert("Resim Yok", "Resim yükleyin veya çekin");
      return;
    }

    const storage = getStorage();
    const filename = image.substring(image.lastIndexOf("/") + 1);
    const storageRef = ref(storage, `user_images/${filename}`);

    try {
      // Firebase Storage'a resmi yükle
      const response = await fetch(image);
      const blob = await response.blob();
      await uploadBytes(storageRef, blob);
      const imageUrl = await getDownloadURL(storageRef);

      // API'ye resmi gönder ve tahmin al
      const formData = new FormData();
      formData.append("file", {
        uri: image,
        name: "image.jpg",
        type: "image/jpeg",
      });

      // https://fastapi-backend-3-q9m9.onrender.com/predict/
      // http://192.168.1.148:8000/predict/
      const apiResponse = await fetch(
        "https://fastapi-backend-3-q9m9.onrender.com/predict/",
        {
          method: "POST",
          body: formData,
          headers: {
            "Content-Type": "multipart/form-data",
          },
        }
      );

      const predictionResult = await apiResponse.json();
      setResult(predictionResult);


      if (predictionResult.entropy > 0.5) {
        Alert.alert(
          "Hatalı Resim",
          `Lütfen geçerli bir resim yükleyin.\n\n Entropi: ${predictionResult.entropy.toFixed(2)}
          }`
        );
        setLoading(false);
        setImage(false)
        
        return;
      }

      // Tahmin sonuçlarını veritabanına kaydet
      await savePredictionToFirestore(userEmail, imageUrl, predictionResult);
      setLoading(false)
      
      Alert.alert("Başarılı", "Tahmin işlemi tamamlandı!");
      navigation.navigate("Tahmin")

      
    } catch (error) {
      console.error("Error during upload or predict:", error);
      Alert.alert("Error", "An error occurred while processing the image.");
    }
  };

  const savePredictionToFirestore = async (userEmail, imageUrl, predictionResult) => {
    try {
      const usersRef = collection(db, "users");
      const q = query(usersRef, where("email", "==", userEmail));
      const querySnapshot = await getDocs(q);

      if (querySnapshot.empty) {
        throw new Error("User not found");
      }

      const userDocRef = querySnapshot.docs[0].ref;
      const predictionsRef = collection(userDocRef, "predictions");

      await addDoc(predictionsRef, {
        imageUrl: imageUrl,
        result: predictionResult.predicted_class_name,
        confidence: predictionResult.confidence,
        timestamp: new Date(),
      });
    } catch (error) {
      console.error("Error saving prediction to Firestore:", error);
      Alert.alert("Error", "Failed to save prediction.");
    }
  };

  return (
    <View style={styles.container}>
      <TouchableOpacity style={styles.button} onPress={pickImage}>
        <Icon name="upload" size={50} color="#FFF" style={styles.icon} />
        <Text style={styles.buttonText}>Galeriden Yükle</Text>
      </TouchableOpacity>

      <TouchableOpacity style={[styles.button, styles.cameraButton]} onPress={takePhoto}>
        <Icon name="camera" size={50} color="#FFF" style={styles.icon} />
        <Text style={styles.buttonText}>Fotoğraf Çek</Text>
      </TouchableOpacity>


      {/* Info Butonu */}
      <TouchableOpacity
        style={styles.infoButton}
        onPress={() => setModalVisible(true)}
      >
        <Icon name="info" size={20} color="#FFF" />
      </TouchableOpacity>

      {/* Modal */}
      <Modal
        visible={modalVisible}
        animationType="slide"
        transparent={true}
        onRequestClose={() => setModalVisible(false)}
      >
        <View style={styles.modalContainer}>
          <Text style={styles.modalTitle}>Tüm bitki çeşitlerimiz şunlardır:</Text>
          <FlatList
            data={fruitList}
            keyExtractor={(item) => item.id}
            renderItem={renderFruit}
          />
          <TouchableOpacity
            style={styles.closeButton}
            onPress={() => setModalVisible(false)}
          >
            <Text style={styles.closeButtonText}>Kapat</Text>
          </TouchableOpacity>
        </View>
      </Modal>


      {image && (
        <>
          <Image source={{ uri: image }} style={styles.image} />
          <TouchableOpacity style={[styles.button, styles.predictButton]} onPress={uploadAndPredict}>
            <Icon name="cloud-upload" size={50} color="#FFF" style={styles.icon} />
            <Text style={styles.buttonText}>Tahmin Et</Text>
          </TouchableOpacity>
        </>
      )}

{result && result.entropy <= 0.5 && (
  <View style={styles.resultCard}>
    <Text style={styles.resultText}>
      Sınıf: {result.predicted_class_name}
    </Text>
    <Text style={styles.resultText}>
      Güvenilirlik: {result.confidence ? result.confidence.toFixed(2) : "HATA"}
    </Text>
  </View>
)}

      
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 20,
    backgroundColor: "#F0F4F8",
  },
  button: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "#5FC9C4",
    width: "80%",
    paddingVertical: 15,
    borderRadius: 10,
    marginBottom: 20,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 5,
    elevation: 3,
  },
  cameraButton: {
    backgroundColor: "#A47EDE",
  },
  predictButton: {
    backgroundColor: "#FF8C00",
    marginTop: 20,
  },
  icon: {
    marginRight: 10,
  },
  buttonText: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#FFF",
  },
  image: {
    width: 200,
    height: 200,
    marginTop: 20,
    borderRadius: 20,
  },
  resultCard: {
    marginTop: 20,
    padding: 15,
    backgroundColor: "#FFF",
    borderRadius: 10,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 5,
    elevation: 3,
    alignItems: "center",
    width: "80%",
  },
  resultText: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
  },

  infoButton: {
    position: "absolute",
    bottom: 50,
    right: 20,
    backgroundColor: "#FF8C00",
    width: 50,
    height: 50,
    justifyContent: "center",
    alignItems: "center",
    borderRadius: 25,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 5,
    elevation: 3,
  },
  modalContainer: {
    flex: 1,
    backgroundColor: "#FFF",
    marginTop: "30%",
    marginHorizontal: "5%",
    borderRadius: 20,
    padding: 20,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 10,
    elevation: 5,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: "bold",
    marginBottom: 20,
    textAlign: "center",
  },
  fruitItem: {
    flexDirection: "row",
    alignItems: "center",
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: "#E0E0E0",
  },
  fruitImage: {
    width: 40,
    height: 40,
    marginRight: 15,
  },
  fruitName: {
    fontSize: 16,
  },
  closeButton: {
    marginTop: 20,
    alignSelf: "center",
    backgroundColor: "#FF5C5C",
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 10,
  },
  closeButtonText: {
    color: "#FFF",
    fontSize: 16,
    fontWeight: "bold",
  },



});

export default Photo;
********** tahmin*******
import React, { useEffect, useState } from "react";
import { View, Text, StyleSheet, Alert, Image, FlatList ,Button} from "react-native";
import { collection, query, where, onSnapshot, doc,getDocs,orderBy} from "firebase/firestore";
import { db } from "../../../firebase";
import { getAuth } from "firebase/auth";
import Loading from "../../components/Loading";

const Tahmin = ({navigation}) => {


  const auth = getAuth();
  const currentUser = auth.currentUser;

  if (!currentUser) {
    console.error("No user is logged in.");
    return <Text>Error: No user is logged in.</Text>;
  }

  const userEmail = currentUser.email; // Oturum açmış kullanıcının e-posta adresi
  console.log("User Email from Firebase Auth:", userEmail)

  const [predictions, setPredictions] = useState([]);

  const getUserIdByEmail = async (email) => {
    const usersRef = collection(db, "users");
    const q = query(usersRef, where("email", "==", email));
    const querySnapshot = await getDocs(q);

    if (querySnapshot.empty) {
      throw new Error("No user found with the given email");
    }

    return querySnapshot.docs[0].id; // Belge ID'si (userId)
  };

  useEffect(() => {
    let unsubscribe; // Dinleyiciyi sonlandırmak için referans
  
    const subscribeToPredictions = async () => {
      try {
        // Kullanıcı ID'sini email'e göre bul
        const userId = await getUserIdByEmail(userEmail);
  
        // predictions alt koleksiyonuna eriş ve sıralama ekle
        const predictionsRef = collection(db, "users", userId, "predictions");
        const q = query(predictionsRef, orderBy("timestamp", "desc")); // Zamana göre sıralama (sondan başa)
  
        // Firestore realtime listener
        unsubscribe = onSnapshot(q, (snapshot) => {
          const updatedPredictions = [];
          snapshot.forEach((doc) => {
            updatedPredictions.push({ id: doc.id, ...doc.data() });
          });
          setPredictions(updatedPredictions);
        });
      } catch (error) {
        console.error("Error fetching predictions:", error);
        Alert.alert("Error", "Failed to fetch predictions.");
      }
    };
  
    subscribeToPredictions();
  
    // Cleanup: Dinleyiciyi kaldır
    return () => {
      if (unsubscribe) {
        unsubscribe();
      }
    };
  }, [userEmail]);
  

  const renderPrediction = ({ item }) => (
    <View style={styles.card}>
      <Image source={{ uri: item.imageUrl }} style={styles.image} />
      <Text style={styles.resultText}>Sınıfı: {item.result}</Text>
      <Text style={styles.resultText}>
        Güvenilirlik: {item.confidence.toFixed(2)}
      </Text>
      <Text style={styles.timestamp}>
        Gün: {new Date(item.timestamp?.seconds * 1000).toLocaleString()}
      </Text>
    </View>
  );

  return (
    <View style={styles.container}>
      <Text style={styles.text}>Tahminler</Text>
      <Button title="Seçim Ekranına Git" onPress={() => navigation.navigate("Secim")} />
      <FlatList
        data={predictions}
        keyExtractor={(item) => item.id}
        renderItem={renderPrediction}
        ListEmptyComponent={<Loading/>}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: "white",
  },
  text: {
    fontSize: 20,
    marginBottom: 20,
    textAlign: "center",
  },
  card: {
    backgroundColor: "#f0f0f0",
    padding: 15,
    marginVertical: 10,
    borderRadius: 10,
    borderWidth: 1,
    alignItems: "center",
  },
  image: {
    width: 200,
    height: 200,
    marginBottom: 10,
    borderRadius: 10,
  },
  resultText: {
    fontSize: 16,
    fontWeight: "bold",
    marginBottom: 5,
  },
  timestamp: {
    fontSize: 14,
    color: "gray",
  },
});

export default Tahmin;

******** Secim********import React, { useState } from "react";
import { View, Text, StyleSheet, TouchableOpacity } from "react-native";
import { RadioButton } from "react-native-paper";

const Secim= ({ navigation,route }) => {
  const [cozumTercihi, setCozumTercihi] = useState(null);
  const [cozumSuresi, setCozumSuresi] = useState(null);
  const [yetistirmeYeri, setYetistirmeYeri] = useState(null);
  const { selectedClass } = route.params;

  const handleDevam = () => {
    if (!cozumTercihi || !cozumSuresi || !yetistirmeYeri) {
      alert("Lütfen tüm seçimleri yapınız.");
      return;
    }
    // Seçimleri bir sonraki ekrana gönder
    navigation.navigate("Tedavi", {
      cozumTercihi,
      cozumSuresi,
      yetistirmeYeri,
      selectedClass
    });
  };

  return (
    <View style={styles.container}>
      <Text style={styles.header}>Seçim Ekranı</Text>
      <Text style={styles.subHeader}>
        Lütfen aşağıdaki kategorilerden birer seçim yapınız:
      </Text>

      {/* Çözüm Tercihi */}
      <Text style={styles.categoryTitle}>Çözüm Tercihi</Text>
      <RadioButton.Group
        onValueChange={(value) => setCozumTercihi(value)}
        value={cozumTercihi}
      >
        <View style={styles.radioRow}>
          <RadioButton value="kimyasal" />
          <Text style={styles.radioText}>Kimyasal</Text>
        </View>
        <View style={styles.radioRow}>
          <RadioButton value="doğal" />
          <Text style={styles.radioText}>Doğal</Text>
        </View>
      </RadioButton.Group>

      {/* Çözüm Süresi */}
      <Text style={styles.categoryTitle}>Çözüm Süresi</Text>
      <RadioButton.Group
        onValueChange={(value) => setCozumSuresi(value)}
        value={cozumSuresi}
      >
        <View style={styles.radioRow}>
          <RadioButton value="kısa" />
          <Text style={styles.radioText}>Kısa Vadeli</Text>
        </View>
        <View style={styles.radioRow}>
          <RadioButton value="uzun" />
          <Text style={styles.radioText}>Uzun Vadeli</Text>
        </View>
      </RadioButton.Group>

      {/* Yetiştirme Yeri */}
      <Text style={styles.categoryTitle}>Yetiştirme Yeri</Text>
      <RadioButton.Group
        onValueChange={(value) => setYetistirmeYeri(value)}
        value={yetistirmeYeri}
      >
        <View style={styles.radioRow}>
          <RadioButton value="ev" />
          <Text style={styles.radioText}>Ev</Text>
        </View>
        <View style={styles.radioRow}>
          <RadioButton value="bahçe" />
          <Text style={styles.radioText}>Bahçe</Text>
        </View>
        <View style={styles.radioRow}>
          <RadioButton value="sera" />
          <Text style={styles.radioText}>Sera</Text>
        </View>
      </RadioButton.Group>

      {/* Devam Butonu */}
      <TouchableOpacity style={styles.button} onPress={handleDevam}>
        <Text style={styles.buttonText}>Devam Et</Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: "#F9F9F9",
  },
  header: {
    fontSize: 24,
    fontWeight: "bold",
    marginBottom: 10,
    textAlign: "center",
  },
  subHeader: {
    fontSize: 14,
    marginBottom: 20,
    textAlign: "center",
    color: "#555",
  },
  categoryTitle: {
    fontSize: 18,
    fontWeight: "bold",
    marginBottom: 10,
  },
  radioRow: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 10,
  },
  radioText: {
    fontSize: 16,
    marginLeft: 8,
  },
  button: {
    marginTop: 20,
    backgroundColor: "#118B50",
    padding: 15,
    borderRadius: 10,
    alignItems: "center",
  },
  buttonText: {
    color: "#FFF",
    fontSize: 18,
    fontWeight: "bold",
  },
});
export default Secim;







*************** SECİM******************
import React, { useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ActivityIndicator,
  ScrollView,
} from "react-native";
import { RadioButton } from "react-native-paper";

const Secim = ({ navigation, route }) => {
  const [cozumTercihi, setCozumTercihi] = useState(null);
  const [cozumSuresi, setCozumSuresi] = useState(null);
  const [yetistirmeYeri, setYetistirmeYeri] = useState(null);
  const [loading, setLoading] = useState(false);
  const [response, setResponse] = useState("");

  const { selectedClass } = route.params;

  const GEMINI_API_KEY = "AIzaSyCR9gWNdfwCfJLET5bHJCcqyQoVrzdm3gc"; // Buraya kendi API anahtarınızı ekleyin
  const GEMINI_ENDPOINT =
    "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent";

  const handleDevam = async () => {
    if (!cozumTercihi || !cozumSuresi || !yetistirmeYeri) {
      alert("Lütfen tüm seçimleri yapınız.");
      return;
    }

    setLoading(true);

    const prompt = `${selectedClass} hastalığına sahip bitkim var. ${yetistirmeYeri}'nde yetiştiriyorum. ${cozumTercihi} bir çözüm aramaktayım. Bana ${cozumTercihi} bir tedavi öner. En fazla 100 kelime ile özetle.`;

    try {
      const apiResponse = await fetch(`${GEMINI_ENDPOINT}?key=${GEMINI_API_KEY}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          contents: [
            {
              parts: [{ text: prompt }],
            },
          ],
        }),
      });

      const data = await apiResponse.json();
      console.log("API Yanıtı:", data);
      console.log("API Yanıtının İçeriği:", JSON.stringify(data, null, 2));


      if (data && data.candidates && data.candidates[0] && data.candidates[0].content) {
        const resultText = data.candidates[0].content.parts
          .map((part) => part.text)
          .join(" ");
        setResponse(resultText);
      } else {
        setResponse("Yanıt alınamadı.");
      }
    } catch (error) {
      console.error("Gemini API error:", error);
      setResponse("Bir hata oluştu. Lütfen tekrar deneyin.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.header}>Seçim Ekranı</Text>
      <Text style={styles.subHeader}>
        Lütfen aşağıdaki kategorilerden birer seçim yapınız:
      </Text>

      {/* Çözüm Tercihi */}
      <Text style={styles.categoryTitle}>Çözüm Tercihi</Text>
      <RadioButton.Group
        onValueChange={(value) => setCozumTercihi(value)}
        value={cozumTercihi}
      >
        <View style={styles.radioRow}>
          <RadioButton value="kimyasal" />
          <Text style={styles.radioText}>Kimyasal</Text>
        </View>
        <View style={styles.radioRow}>
          <RadioButton value="doğal" />
          <Text style={styles.radioText}>Doğal</Text>
        </View>
      </RadioButton.Group>

      {/* Çözüm Süresi */}
      <Text style={styles.categoryTitle}>Çözüm Süresi</Text>
      <RadioButton.Group
        onValueChange={(value) => setCozumSuresi(value)}
        value={cozumSuresi}
      >
        <View style={styles.radioRow}>
          <RadioButton value="kısa" />
          <Text style={styles.radioText}>Kısa Vadeli</Text>
        </View>
        <View style={styles.radioRow}>
          <RadioButton value="uzun" />
          <Text style={styles.radioText}>Uzun Vadeli</Text>
        </View>
      </RadioButton.Group>

      {/* Yetiştirme Yeri */}
      <Text style={styles.categoryTitle}>Yetiştirme Yeri</Text>
      <RadioButton.Group
        onValueChange={(value) => setYetistirmeYeri(value)}
        value={yetistirmeYeri}
      >
        <View style={styles.radioRow}>
          <RadioButton value="ev" />
          <Text style={styles.radioText}>Ev</Text>
        </View>
        <View style={styles.radioRow}>
          <RadioButton value="bahçe" />
          <Text style={styles.radioText}>Bahçe</Text>
        </View>
        <View style={styles.radioRow}>
          <RadioButton value="sera" />
          <Text style={styles.radioText}>Sera</Text>
        </View>
      </RadioButton.Group>

      {/* Devam Butonu */}
      <TouchableOpacity style={styles.button} onPress={handleDevam}>
        <Text style={styles.buttonText}>Devam Et</Text>
      </TouchableOpacity>

      {/* Gemini API Yanıtını Göster */}
      {loading && <ActivityIndicator size="large" color="#118B50" />}
      {!loading && response && (
        <View style={styles.responseContainer}>
          <Text style={styles.responseText}>Tedavi Önerisi:</Text>
          <Text style={styles.response}>{response}</Text>
        </View>
      )}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: "#F9F9F9",
  },
  header: {
    fontSize: 24,
    fontWeight: "bold",
    marginBottom: 10,
    textAlign: "center",
  },
  subHeader: {
    fontSize: 14,
    marginBottom: 20,
    textAlign: "center",
    color: "#555",
  },
  categoryTitle: {
    fontSize: 18,
    fontWeight: "bold",
    marginBottom: 10,
  },
  radioRow: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 10,
  },
  radioText: {
    fontSize: 16,
    marginLeft: 8,
  },
  button: {
    marginTop: 20,
    backgroundColor: "#118B50",
    padding: 15,
    borderRadius: 10,
    alignItems: "center",
  },
  buttonText: {
    color: "#FFF",
    fontSize: 18,
    fontWeight: "bold",
  },
  responseContainer: {
    marginTop: 20,
    padding: 15,
    backgroundColor: "#FFF",
    borderRadius: 10,
    elevation: 2,
  },
  responseText: {
    fontSize: 16,
    fontWeight: "bold",
    marginBottom: 5,
  },
  response: {
    fontSize: 14,
    color: "#333",
  },
});

export default Secim;


*************Secim*************
import React, { useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
  ActivityIndicator,
} from "react-native";
import { RadioButton } from "react-native-paper";
import Papa from "papaparse";
import { getStorage, ref, uploadBytes, getDownloadURL } from "firebase/storage";

const Secim = ({ navigation, route }) => {
  const [cozumTercihi, setCozumTercihi] = useState(null);
  const [cozumSuresi, setCozumSuresi] = useState(null);
  const [yetistirmeYeri, setYetistirmeYeri] = useState(null);
  const [loading, setLoading] = useState(false);
  const [response, setResponse] = useState("");

  const { selectedClass } = route.params;


  const fetchAndParseCSV = async () => {
    try {
      setLoading(true);

      // Firebase Storage'dan CSV dosyasını al
      const storage = getStorage(); // Firebase Storage örneği
      const storageRef = ref(storage, "data/bitki_hastalik_tedavii.csv"); // Firebase'deki dosya yolu

      const url = await getDownloadURL(storageRef); // Dosyanın URL'sini al

      // Dosyayı indir ve metin olarak al
      const response = await fetch(url);
      const csvText = await response.text();

      // CSV'yi ayrıştır
      Papa.parse(csvText, {
        header: true,
        complete: (results) => {
          console.log("CSV Ayrıştırıldı:", results.data);

          // Kullanıcı seçimlerine göre tedavi bul
          const uygunTedavi = results.data.find(
            (row) =>
              row.Bitki_Hastalik === selectedClass &&
              row.Cozum === cozumTercihi &&
              row.Sure === cozumSuresi &&
              row.Mekan === yetistirmeYeri
          );

          if (uygunTedavi) {
            setResponse(uygunTedavi.Tedavi || "Tedavi bulunamadı.");
          } else {
            setResponse("Tedavi bulunamadı.");
          }
        },
        error: (error) => {
          console.error("CSV Ayrıştırma Hatası:", error);
          setResponse("CSV dosyası işlenirken hata oluştu.");
        },
      });
    } catch (error) {
      console.error("CSV dosyası alınırken hata oluştu:", error);
      setResponse("Dosya alınamadı. Lütfen tekrar deneyin.");
    } finally {
      setLoading(false);
    }
  };

  const handleDevam = () => {
    if (!cozumTercihi || !cozumSuresi || !yetistirmeYeri) {
      alert("Lütfen tüm seçimleri yapınız.");
      return;
    }
    fetchAndParseCSV();
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.header}>Seçim Ekranı</Text>
      <Text style={styles.subHeader}>
        Lütfen aşağıdaki kategorilerden birer seçim yapınız:
      </Text>

      {/* Çözüm Tercihi */}
      <Text style={styles.categoryTitle}>Çözüm Tercihi</Text>
      <RadioButton.Group
        onValueChange={(value) => setCozumTercihi(value)}
        value={cozumTercihi}
      >
        <View style={styles.radioRow}>
          <RadioButton value="kimyasal" />
          <Text style={styles.radioText}>Kimyasal</Text>
        </View>
        <View style={styles.radioRow}>
          <RadioButton value="doğal" />
          <Text style={styles.radioText}>Doğal</Text>
        </View>
      </RadioButton.Group>

      {/* Çözüm Süresi */}
      <Text style={styles.categoryTitle}>Çözüm Süresi</Text>
      <RadioButton.Group
        onValueChange={(value) => setCozumSuresi(value)}
        value={cozumSuresi}
      >
        <View style={styles.radioRow}>
          <RadioButton value="kısa vade" />
          <Text style={styles.radioText}>Kısa Vadeli</Text>
        </View>
        <View style={styles.radioRow}>
          <RadioButton value="uzun vade" />
          <Text style={styles.radioText}>Uzun Vadeli</Text>
        </View>
      </RadioButton.Group>

      {/* Yetiştirme Yeri */}
      <Text style={styles.categoryTitle}>Yetiştirme Yeri</Text>
      <RadioButton.Group
        onValueChange={(value) => setYetistirmeYeri(value)}
        value={yetistirmeYeri}
      >
        <View style={styles.radioRow}>
          <RadioButton value="ev" />
          <Text style={styles.radioText}>Ev</Text>
        </View>
        <View style={styles.radioRow}>
          <RadioButton value="bahçe" />
          <Text style={styles.radioText}>Bahçe</Text>
        </View>
        <View style={styles.radioRow}>
          <RadioButton value="sera" />
          <Text style={styles.radioText}>Sera</Text>
        </View>
      </RadioButton.Group>

      {/* Devam Butonu */}
      <TouchableOpacity style={styles.button} onPress={handleDevam}>
        <Text style={styles.buttonText}>Devam Et</Text>
      </TouchableOpacity>

      {/* CSV Yanıtını Göster */}
      {loading && <ActivityIndicator size="large" color="#118B50" />}
      {!loading && response && (
        <View style={styles.responseContainer}>
          <Text style={styles.responseText}>Tedavi Önerisi:</Text>
          <Text style={styles.response}>{response}</Text>
        </View>
      )}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: "#F9F9F9",
  },
  header: {
    fontSize: 24,
    fontWeight: "bold",
    marginBottom: 10,
    textAlign: "center",
  },
  subHeader: {
    fontSize: 14,
    marginBottom: 20,
    textAlign: "center",
    color: "#555",
  },
  categoryTitle: {
    fontSize: 18,
    fontWeight: "bold",
    marginBottom: 10,
  },
  radioRow: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 10,
  },
  radioText: {
    fontSize: 16,
    marginLeft: 8,
  },
  button: {
    marginTop: 20,
    backgroundColor: "#118B50",
    padding: 15,
    borderRadius: 10,
    alignItems: "center",
  },
  buttonText: {
    color: "#FFF",
    fontSize: 18,
    fontWeight: "bold",
  },
  responseContainer: {
    marginTop: 20,
    padding: 15,
    backgroundColor: "#FFF",
    borderRadius: 10,
    elevation: 2,
  },
  responseText: {
    fontSize: 16,
    fontWeight: "bold",
    marginBottom: 5,
  },
  response: {
    fontSize: 14,
    color: "#333",
  },
});

export default Secim;



************secim*********
import React, { useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
  ActivityIndicator,
} from "react-native";
import { RadioButton } from "react-native-paper";
import Papa from "papaparse";
import { getStorage, ref, getDownloadURL } from "firebase/storage";
import Modal from "react-native-modal";

const GEMINI_ENDPOINT = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent";
const GEMINI_API_KEY = "AIzaSyCR9gWNdfwCfJLET5bHJCcqyQoVrzdm3gc";

const Secim = ({ navigation, route }) => {
  const [cozumTercihi, setCozumTercihi] = useState(null);
  const [cozumSuresi, setCozumSuresi] = useState(null);
  const [yetistirmeYeri, setYetistirmeYeri] = useState(null);
  const [loading, setLoading] = useState(false);
  const [response, setResponse] = useState("");
  const [aiResponse, setAiResponse] = useState("");
  const [selectedResponse, setSelectedResponse] = useState(null);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [isYapayZekaActive, setIsYapayZekaActive] = useState(true);

  const { selectedClass } = route.params;

  const fetchAndParseCSV = async () => {
    try {
      setLoading(true);

      const storage = getStorage();
      const storageRef = ref(storage, "data/bitki_hastalik_tedavii.csv");

      const url = await getDownloadURL(storageRef);
      const response = await fetch(url);
      const csvText = await response.text();

      Papa.parse(csvText, {
        header: true,
        complete: (results) => {
          

          const uygunTedavi = results.data.find(
            (row) =>
              row.Bitki_Hastalik === selectedClass &&
              row.Cozum === cozumTercihi &&
              row.Sure === cozumSuresi &&
              row.Mekan === yetistirmeYeri
          );

          if (uygunTedavi) {
            setResponse(uygunTedavi.Tedavi || "Tedavi bulunamadı.");
            setIsModalVisible(true);
          } else {
            setResponse("Tedavi bulunamadı.");
            setIsModalVisible(true);
          }
        },
        error: (error) => {
          console.error("CSV Ayrıştırma Hatası:", error);
          setResponse("CSV dosyası işlenirken hata oluştu.");
          setIsModalVisible(true);
        },
      });
    } catch (error) {
      console.error("CSV dosyası alınırken hata oluştu:", error);
      setResponse("Dosya alınamadı. Lütfen tekrar deneyin.");
      setIsModalVisible(true);
    } finally {
      setLoading(false);
    }
  };

  const yapayzeka = async () => {
    if (!cozumTercihi || !cozumSuresi || !yetistirmeYeri) {
      alert("Lütfen tüm seçimleri yapınız.");
      return;
    }

    setLoading(true);
    setIsYapayZekaActive(false); // Butonu gizle

    const prompt = `${selectedClass} hastalığına sahip bitkim var. ${yetistirmeYeri}'nde yetiştiriyorum. ${cozumTercihi} bir çözüm aramaktayım. Bana ${cozumTercihi} bir tedavi öner. En fazla 50 kelime ile özetle.`;

    try {
      const apiResponse = await fetch(`${GEMINI_ENDPOINT}?key=${GEMINI_API_KEY}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          contents: [
            {
              parts: [{ text: prompt }],
            },
          ],
        }),
      });

      const data = await apiResponse.json();
      console.log("API Yanıtı:", data);

      if (data && data.candidates && data.candidates[0] && data.candidates[0].content) {
        const resultText = data.candidates[0].content.parts
          .map((part) => part.text)
          .join(" ");
        setAiResponse(resultText);
      } else {
        setAiResponse("Yanıt alınamadı.");
      }
    } catch (error) {
      console.error("Gemini API error:", error);
      setAiResponse("Bir hata oluştu. Lütfen tekrar deneyin.");
    } finally {
      setLoading(false);
    }
  };

  const handleDevam = () => {
    if (!cozumTercihi || !cozumSuresi || !yetistirmeYeri) {
      alert("Lütfen tüm seçimleri yapınız.");
      return;
    }
    fetchAndParseCSV();
  };

  const resetSelections = () => {
    setCozumTercihi(null);
    setCozumSuresi(null);
    setYetistirmeYeri(null);
    setResponse("");
    setAiResponse("");
    setSelectedResponse(null);
    setIsYapayZekaActive(true);
    setIsModalVisible(false);
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.header}>Seçim Ekranı</Text>
      <Text style={styles.subHeader}>
        Lütfen aşağıdaki kategorilerden birer seçim yapınız:
      </Text>

      {/* Çözüm Tercihi */}
      <Text style={styles.categoryTitle}>Çözüm Tercihi</Text>
      <RadioButton.Group
        onValueChange={(value) => setCozumTercihi(value)}
        value={cozumTercihi}
      >
        <View style={styles.radioRow}>
          <RadioButton value="kimyasal" />
          <Text style={styles.radioText}>Kimyasal</Text>
        </View>
        <View style={styles.radioRow}>
          <RadioButton value="doğal" />
          <Text style={styles.radioText}>Doğal</Text>
        </View>
      </RadioButton.Group>

      {/* Çözüm Süresi */}
      <Text style={styles.categoryTitle}>Çözüm Süresi</Text>
      <RadioButton.Group
        onValueChange={(value) => setCozumSuresi(value)}
        value={cozumSuresi}
      >
        <View style={styles.radioRow}>
          <RadioButton value="kısa vade" />
          <Text style={styles.radioText}>Kısa Vadeli</Text>
        </View>
        <View style={styles.radioRow}>
          <RadioButton value="uzun vade" />
          <Text style={styles.radioText}>Uzun Vadeli</Text>
        </View>
      </RadioButton.Group>

      {/* Yetiştirme Yeri */}
      <Text style={styles.categoryTitle}>Yetiştirme Yeri</Text>
      <RadioButton.Group
        onValueChange={(value) => setYetistirmeYeri(value)}
        value={yetistirmeYeri}
      >
        <View style={styles.radioRow}>
          <RadioButton value="ev" />
          <Text style={styles.radioText}>Ev</Text>
        </View>
        <View style={styles.radioRow}>
          <RadioButton value="bahçe" />
          <Text style={styles.radioText}>Bahçe</Text>
        </View>
        <View style={styles.radioRow}>
          <RadioButton value="sera" />
          <Text style={styles.radioText}>Sera</Text>
        </View>
      </RadioButton.Group>

      {/* Devam Butonu */}
      <TouchableOpacity style={styles.button} onPress={handleDevam}>
        <Text style={styles.buttonText}>Devam Et</Text>
      </TouchableOpacity>

      {/* Modal */}
      <Modal
        isVisible={isModalVisible}
        onBackdropPress={resetSelections}
      >
        <View style={styles.modalContainer}>
          <TouchableOpacity
            style={styles.modalCloseButton}
            onPress={resetSelections}
          >
            <Text style={styles.modalCloseButtonText}>Seçim Ekranına Geri Dön</Text>
          </TouchableOpacity>

          <Text style={styles.modalTitle}>Tedavi Önerileri</Text>

          {/* CSV Yanıtı */}
          {response && (
            
              <View>
                <Text style={styles.responseHeader}>CSV'den Gelen Tedavi</Text>
                <View style={styles.optionContainer}>
                  
                  <Text style={styles.modalText}>{response}</Text>
                  <RadioButton
                    value="csv"
                    status={selectedResponse === "csv" ? "checked" : "unchecked"}
                    onPress={() => setSelectedResponse("csv")}
                  />

                </View>
              </View>
          )}

          <View style={styles.divider} />

          {/* Yapay Zeka Yanıtı */}
          {aiResponse && (
          <View>
            <Text style={styles.responseHeader}>Yapay Zekâdan Gelen Tedavi</Text>
            <View style={styles.optionContainer}>
              
              <Text style={styles.modalText}>{aiResponse}</Text>
              <RadioButton
                value="ai"
                status={selectedResponse === "ai" ? "checked" : "unchecked"}
                onPress={() => setSelectedResponse("ai")}
              />

            </View>
          </View>
)}

          {/* Yapay Zekâya Sor Butonu */}
          {isYapayZekaActive && (
            <TouchableOpacity style={styles.modalButton} onPress={yapayzeka}>
              <Text style={styles.modalButtonText}>Yapay Zekâya Sor</Text>
            </TouchableOpacity>
          )}

          {/* Tedaviyi Kaydet Butonu */}
          <TouchableOpacity style={styles.modalButton} onPress={() => {}}>
            <Text style={styles.modalButtonText}>Tedaviyi Kaydet</Text>
          </TouchableOpacity>
        </View>
      </Modal>

      {loading && <ActivityIndicator size="large" color="#118B50" />}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  
  divider:{
    height: 2, // Çizgi kalınlığı
    backgroundColor: "#CCCCCC", // Çizgi rengi
    marginVertical: 10, // Üst ve alt boşluk
    width: "100%", // Çizginin genişliği
  },

  responseHeader: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#118B50",
    marginBottom: 5,
  },
  
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: "#F9F9F9",
  },
  header: {
    fontSize: 24,
    fontWeight: "bold",
    marginBottom: 10,
    textAlign: "center",
    color: "#118B50",
  },
  subHeader: {
    fontSize: 14,
    marginBottom: 20,
    textAlign: "center",
    color: "#555",
  },
  categoryTitle: {
    fontSize: 18,
    fontWeight: "bold",
    marginBottom: 10,
    color: "#333",
  },
  radioRow: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 10,
  },
  radioText: {
    fontSize: 16,
    marginLeft: 8,
    color: "#555",
  },
  button: {
    marginTop: 20,
    backgroundColor: "#118B50",
    padding: 15,
    borderRadius: 10,
    alignItems: "center",
    elevation: 3,
  },
  buttonText: {
    color: "#FFF",
    fontSize: 18,
    fontWeight: "bold",
  },
  modalContainer: {
    backgroundColor: "yellow",
    borderRadius: 50,
    padding: 20,
    alignItems: "center",
  },
  modalCloseButton: {
    alignSelf: "flex-start",
    marginBottom: 30,
  },
  modalCloseButtonText: {
    color: "#118B50",
    fontWeight: "bold",
    fontSize: 14,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: "bold",
    marginBottom: 10,
    color: "#118B50",
  },
  modalText: {
    fontSize: 16,
    marginBottom: 20,
    textAlign: "center",
    color: "#333",
    lineHeight: 24,
  },
  modalButton: {
    backgroundColor: "#118B50",
    padding: 12,
    borderRadius: 8,
    marginTop: 10,
    width: "80%",
    alignItems: "center",
    elevation: 3,
  },
  modalButtonText: {
    color: "#FFF",
    fontWeight: "bold",
    fontSize: 16,
  },
  optionContainer: {
    
    alignItems: "center",
    marginBottom: 10,
  },
});

export default Secim;
*******tedavi****
import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  ActivityIndicator,
} from "react-native";
import { collection, onSnapshot } from "firebase/firestore";
import { auth, db } from "../../../firebase";

const TedaviEkrani = ({ navigation }) => {
  const [loading, setLoading] = useState(true);
  const [treatments, setTreatments] = useState([]);

  useEffect(() => {
    const fetchTreatments = () => {
      const user = auth.currentUser;

      if (!user) {
        alert("Kullanıcı oturum açmamış.");
        return;
      }

      const userId = user.uid;
      const treatmentsRef = collection(db, "users", userId, "tedaviler");

      // Firestore onSnapshot ile anlık güncelleme
      const unsubscribe = onSnapshot(
        treatmentsRef,
        (snapshot) => {
          const treatmentsData = snapshot.docs.map((doc) => ({
            id: doc.id,
            ...doc.data(),
          }));
          setTreatments(treatmentsData);
          setLoading(false);
        },
        (error) => {
          console.error("Tedaviler yüklenirken hata oluştu:", error);
          alert("Tedaviler yüklenirken bir hata oluştu.");
        }
      );

      // Bileşen temizlenirken bağlantıyı kes
      return () => unsubscribe();
    };

    fetchTreatments();
  }, []);

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#118B50" />
        <Text style={styles.loadingText}>Veriler Yükleniyor...</Text>
      </View>
    );
  }

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <Text style={styles.header}>Tedavi Ekranı</Text>
      {treatments.length > 0 ? (
        treatments.map((treatment) => (
          <View key={treatment.id} style={styles.card}>
            <Text style={styles.cardTitle}>{treatment.selectedClass}</Text>
            <Text style={styles.cardDetail}>
              Çözüm Tercihi: {treatment.cozumTercihi}
            </Text>
            <Text style={styles.cardDetail}>
              Çözüm Süresi: {treatment.cozumSuresi}
            </Text>
            <Text style={styles.cardDetail}>
              Yetiştirme Yeri: {treatment.yetistirmeYeri}
            </Text>
            <Text style={styles.cardDetail}>
              Tedavi: {treatment.tedavi}
            </Text>
            <Text style={styles.cardDate}>
              Kayıt Tarihi: {treatment.kayıtTarihi}
            </Text>
          </View>
        ))
      ) : (
        <Text style={styles.noDataText}>Kayıtlı tedavi bulunamadı.</Text>
      )}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 20,
    backgroundColor: "#F9F9F9",
  },
  loadingContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#F9F9F9",
  },
  loadingText: {
    marginTop: 10,
    fontSize: 16,
    color: "#555",
  },
  header: {
    fontSize: 24,
    fontWeight: "bold",
    color: "#118B50",
    marginBottom: 20,
    textAlign: "center",
  },
  card: {
    backgroundColor: "yellow",
    borderRadius: 10,
    padding: 15,
    marginBottom: 15,
    elevation: 3,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  cardTitle: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#118B50",
    marginBottom: 10,
  },
  cardDetail: {
    fontSize: 14,
    color: "#555",
    marginBottom: 5,
  },
  cardDate: {
    fontSize: 12,
    color: "#888",
    textAlign: "right",
    marginTop: 10,
    fontStyle: "italic",
  },
  noDataText: {
    fontSize: 16,
    color: "#555",
    textAlign: "center",
    marginTop: 20,
  },
});

export default TedaviEkrani;


********** home************
import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, ActivityIndicator ,Button} from 'react-native';
import { auth, db } from '../../../firebase'; // Firebase bağlantısı
import { doc, getDoc } from 'firebase/firestore';
import { signOut } from 'firebase/auth';
import Loading from '../../components/Loading';



const Home = ({navigation}) => {

  const handleSignOut = async () => {
    try {
      await signOut(auth); // Firebase çıkış işlemi
      Alert.alert('Çıkış Yapıldı', 'Başarıyla çıkış yaptınız!');
    } catch (error) {
      Alert.alert('Hata', 'Çıkış yapılırken bir hata oluştu.');
      console.error(error);
    }
  };


  const [userData, setUserData] = useState(null); // Kullanıcı verisi
  const [loading, setLoading] = useState(true); // Yükleniyor durumu

  useEffect(() => {
    const fetchUserData = async () => {
      try {
        const currentUser = auth.currentUser; // Mevcut kullanıcı
        if (currentUser) {
          const docRef = doc(db, 'users', currentUser.uid); // Kullanıcıya ait belge
          const docSnap = await getDoc(docRef);

          if (docSnap.exists()) {
            setUserData(docSnap.data()); // Veriyi state'e kaydet
          } else {
            console.log('Kullanıcı verisi bulunamadı!');
          }
        }
      } catch (error) {
        console.error('Veri alınırken hata:', error);
      } finally {
        setLoading(false); // Yükleme tamamlandı
      }
    };

    fetchUserData();
  }, []);

  if (loading) {
    <Loading/>
  }

  return (
    <View style={styles.container}>
      {userData ? (
        <>
          <Text style={styles.title}>Merhaba, {userData.name}!</Text>
          <Text style={styles.info}>Email: {userData.email}</Text>
          <Text style={styles.info}>Kayıt Tarihi: {userData.createdAt?.toDate().toLocaleString()}</Text>
          <Button title="Çıkış Yap" onPress={handleSignOut} />
          
        </>
      ) : (
        <Loading></Loading>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'white',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  info: {
    fontSize: 16,
    marginBottom: 5,
  },
});

export default Home;


***********sign up*************
import React, { useState } from "react";
import {
  View,
  TextInput,
  Alert,
  StyleSheet,
  Text,
  TouchableOpacity,
  KeyboardAvoidingView,
  ScrollView,
  Platform,
  SafeAreaView,
} from "react-native";
import { createUserWithEmailAndPassword } from "firebase/auth";
import { doc, setDoc } from "firebase/firestore";
import { auth, db } from "../../../firebase"; // Firebase bağlantısı
import Icon from "react-native-vector-icons/FontAwesome";
import LottieView from "lottie-react-native";
import { Image } from "react-native-elements";

const SignupScreen = ({ navigation }) => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [password2, setPassword2] = useState("");
  const [name, setName] = useState("");

  const handleSignUp = async () => {
    if (!email || !password || !password2 || !name) {
      Alert.alert("Hata", "Lütfen tüm alanları doldurun.");
      return;
    }

    if (password !== password2) {
      Alert.alert("Hata", "Şifreler eşleşmiyor. Lütfen tekrar deneyin.");
      return;
    }

    try {
      // Firebase Authentication ile kullanıcı kaydı
      const userCredential = await createUserWithEmailAndPassword(
        auth,
        email,
        password
      );
      const userId = userCredential.user.uid;

      // Firestore'da kullanıcı profili oluşturma
      await setDoc(doc(db, "users", userId), {
        email: email,
        name: name,
        createdAt: new Date(),
      });

      Alert.alert("Başarılı", "Kayıt başarılı! Giriş yapabilirsiniz.");
      navigation.navigate("Login"); // Kayıttan sonra Login sayfasına yönlendirme
    } catch (error) {
      Alert.alert("Hata", error.message);
    }
  };

  return (
    <SafeAreaView style={styles.safeArea}>
      <KeyboardAvoidingView
        style={{ flex: 1, marginTop:30}}
        
      >
        <ScrollView
          contentContainerStyle={{ flexGrow: 1, }}
          keyboardShouldPersistTaps="handled"
        >
          <View style={styles.container}>
            <Text style={styles.header}>Kayıt Ol</Text>

            {/* <LottieView
              source={require("../../../assets/icons/r.json")} // Lottie animasyon dosyası
              autoPlay
              loop
              style={{ height: 150, width: 150 }}
            /> */}

            {<Image source={require('../../../assets/icons/leaf2.png')} style={{width:200, height:200}} />}

            <View style={styles.inputContainer}>
              <Icon name="user" size={20} color="#888" style={styles.inputIcon} />
              <TextInput
                style={styles.input}
                placeholder="İsim"
                value={name}
                onChangeText={setName}
              />
            </View>

            <View style={styles.inputContainer}>
              <Icon name="envelope" size={20} color="#888" style={styles.inputIcon} />
              <TextInput
                style={styles.input}
                placeholder="Email"
                value={email}
                onChangeText={setEmail}
                keyboardType="email-address"
              />
            </View>

            <View style={styles.inputContainer}>
              <Icon name="lock" size={20} color="#888" style={styles.inputIcon} />
              <TextInput
                style={styles.input}
                placeholder="Şifre"
                value={password}
                onChangeText={setPassword}
                secureTextEntry
              />
            </View>

            <View style={styles.inputContainer}>
              <Icon name="lock" size={20} color="#888" style={styles.inputIcon} />
              <TextInput
                style={styles.input}
                placeholder="Şifre Yeniden"
                value={password2}
                onChangeText={setPassword2}
                secureTextEntry
              />
            </View>

            <TouchableOpacity style={styles.button} onPress={handleSignUp}>
              <Text style={styles.buttonText}>Kaydol</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.button2}
              onPress={() => navigation.navigate("Login")}
            >
              <Text style={styles.linkText}>Giriş Yap</Text>
            </TouchableOpacity>
          </View>
        </ScrollView>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: "#FBEAD7",
  },
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#FBEAD7",
    padding: 20,
    
  },
  header: {
    fontSize: 28,
    fontWeight: "bold",
    marginBottom: 10,
  },
  inputContainer: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#FFF",
    borderWidth: 1,
    borderColor: "#E5E5E5",
    borderRadius: 8,
    paddingHorizontal: 10,
    width: "90%",
    height: 50,
    marginBottom: 15,
  },
  inputIcon: {
    marginRight: 10,
  },
  input: {
    flex: 1,
    fontSize: 16,
  },
  button: {
    width: "90%",
    height: 50,
    backgroundColor: "#5FC9C4",
    justifyContent: "center",
    alignItems: "center",
    borderRadius: 8,
    marginTop: 10,
  },
  button2: {
    width: "90%",
    height: 50,
    backgroundColor: "blue",
    justifyContent: "center",
    alignItems: "center",
    borderRadius: 8,
    marginTop: 10,
  },
  buttonText: {
    color: "#FFF",
    fontSize: 16,
    fontWeight: "bold",
  },
  linkText: {
    fontWeight: "bold",
    color: "white",
    fontSize: 16,
  },
});

export default SignupScreen;


************ signup**********

import React, { useState } from "react";
import {
  View,
  TextInput,
  Alert,
  StyleSheet,
  Text,
  TouchableOpacity,
  KeyboardAvoidingView,
  ScrollView,
  Platform,
  SafeAreaView,
} from "react-native";
import { createUserWithEmailAndPassword } from "firebase/auth";
import { doc, setDoc } from "firebase/firestore";
import { auth, db } from "../../../firebase"; // Firebase bağlantısı
import Icon from "react-native-vector-icons/FontAwesome";
import { Image } from "react-native-elements";
import { Picker } from "@react-native-picker/picker"; // Dropdown için picker

const SignupScreen = ({ navigation }) => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [password2, setPassword2] = useState("");
  const [name, setName] = useState("");
  const [selectedCity, setSelectedCity] = useState(""); // Şehir seçimi

  const cities = [
    { label: "Adana", value: "Adana" },
    { label: "Adıyaman", value: "Adiyaman" },
    { label: "Afyonkarahisar", value: "Afyonkarahisar" },
    { label: "Ağrı", value: "Agri" },
    { label: "Aksaray", value: "Aksaray" },
    { label: "Amasya", value: "Amasya" },
    { label: "Ankara", value: "Ankara" },
    { label: "Antalya", value: "Antalya" },
    { label: "Ardahan", value: "Ardahan" },
    { label: "Artvin", value: "Artvin" },
    { label: "Aydın", value: "Aydin" },
    { label: "Balıkesir", value: "Balikesir" },
    { label: "Bartın", value: "Bartin" },
    { label: "Batman", value: "Batman" },
    { label: "Bayburt", value: "Bayburt" },
    { label: "Bilecik", value: "Bilecik" },
    { label: "Bingöl", value: "Bingol" },
    { label: "Bitlis", value: "Bitlis" },
    { label: "Bolu", value: "Bolu" },
    { label: "Burdur", value: "Burdur" },
    { label: "Bursa", value: "Bursa" },
    { label: "Çanakkale", value: "Canakkale" },
    { label: "Çankırı", value: "Cankiri" },
    { label: "Çorum", value: "Corum" },
    { label: "Denizli", value: "Denizli" },
    { label: "Diyarbakır", value: "Diyarbakir" },
    { label: "Düzce", value: "Duzce" },
    { label: "Edirne", value: "Edirne" },
    { label: "Elazığ", value: "Elazig" },
    { label: "Erzincan", value: "Erzincan" },
    { label: "Erzurum", value: "Erzurum" },
    { label: "Eskişehir", value: "Eskisehir" },
    { label: "Gaziantep", value: "Gaziantep" },
    { label: "Giresun", value: "Giresun" },
    { label: "Gümüşhane", value: "Gumushane" },
    { label: "Hakkari", value: "Hakkari" },
    { label: "Hatay", value: "Hatay" },
    { label: "Iğdır", value: "Igdir" },
    { label: "Isparta", value: "Isparta" },
    { label: "İstanbul", value: "Istanbul" },
    { label: "İzmir", value: "Izmir" },
    { label: "Kahramanmaraş", value: "Kahramanmaras" },
    { label: "Karabük", value: "Karabuk" },
    { label: "Karaman", value: "Karaman" },
    { label: "Kars", value: "Kars" },
    { label: "Kastamonu", value: "Kastamonu" },
    { label: "Kayseri", value: "Kayseri" },
    { label: "Kırıkkale", value: "Kirikkale" },
    { label: "Kırklareli", value: "Kirklareli" },
    { label: "Kırşehir", value: "Kirsehir" },
    { label: "Kilis", value: "Kilis" },
    { label: "Kocaeli", value: "Kocaeli" },
    { label: "Konya", value: "Konya" },
    { label: "Kütahya", value: "Kutahya" },
    { label: "Malatya", value: "Malatya" },
    { label: "Manisa", value: "Manisa" },
    { label: "Mardin", value: "Mardin" },
    { label: "Mersin", value: "Mersin" },
    { label: "Muğla", value: "Mugla" },
    { label: "Muş", value: "Mus" },
    { label: "Nevşehir", value: "Nevsehir" },
    { label: "Niğde", value: "Nigde" },
    { label: "Ordu", value: "Ordu" },
    { label: "Osmaniye", value: "Osmaniye" },
    { label: "Rize", value: "Rize" },
    { label: "Sakarya", value: "Sakarya" },
    { label: "Samsun", value: "Samsun" },
    { label: "Siirt", value: "Siirt" },
    { label: "Sinop", value: "Sinop" },
    { label: "Sivas", value: "Sivas" },
    { label: "Şanlıurfa", value: "Sanliurfa" },
    { label: "Şırnak", value: "Sirnak" },
    { label: "Tekirdağ", value: "Tekirdag" },
    { label: "Tokat", value: "Tokat" },
    { label: "Trabzon", value: "Trabzon" },
    { label: "Tunceli", value: "Tunceli" },
    { label: "Uşak", value: "Usak" },
    { label: "Van", value: "Van" },
    { label: "Yalova", value: "Yalova" },
    { label: "Yozgat", value: "Yozgat" },
    { label: "Zonguldak", value: "Zonguldak" },
  ];
  

  const handleSignUp = async () => {
    if (!email || !password || !password2 || !name || !selectedCity) {
      Alert.alert("Hata", "Lütfen tüm alanları doldurun.");
      return;
    }

    if (password !== password2) {
      Alert.alert("Hata", "Şifreler eşleşmiyor. Lütfen tekrar deneyin.");
      return;
    }

    try {
      // Firebase Authentication ile kullanıcı kaydı
      const userCredential = await createUserWithEmailAndPassword(
        auth,
        email,
        password
      );
      const userId = userCredential.user.uid;

      // Firestore'da kullanıcı profili oluşturma
      await setDoc(doc(db, "users", userId), {
        email: email,
        name: name,
        city: selectedCity, // Seçilen şehir kaydediliyor
        createdAt: new Date(),
      });

      Alert.alert("Başarılı", "Kayıt başarılı! Giriş yapabilirsiniz.");
      navigation.navigate("Login"); // Kayıttan sonra Login sayfasına yönlendirme
    } catch (error) {
      Alert.alert("Hata", error.message);
    }
  };

  return (
    <SafeAreaView style={styles.safeArea}>
      <KeyboardAvoidingView style={{ flex: 1, marginTop: 30 }}>
        <ScrollView
          contentContainerStyle={{ flexGrow: 1 }}
          keyboardShouldPersistTaps="handled"
        >
          <View style={styles.container}>
            <Text style={styles.header}>Kayıt Ol</Text>
            <Image
              source={require("../../../assets/icons/leaf2.png")}
              style={{ width: 200, height: 200 }}
            />

            <View style={styles.inputContainer}>
              <Icon name="user" size={20} color="#888" style={styles.inputIcon} />
              <TextInput
                style={styles.input}
                placeholder="İsim"
                value={name}
                onChangeText={setName}
              />
            </View>

            <View style={styles.inputContainer}>
              <Icon name="envelope" size={20} color="#888" style={styles.inputIcon} />
              <TextInput
                style={styles.input}
                placeholder="Email"
                value={email}
                onChangeText={setEmail}
                keyboardType="email-address"
              />
            </View>

            <View style={styles.inputContainer}>
              <Icon name="lock" size={20} color="#888" style={styles.inputIcon} />
              <TextInput
                style={styles.input}
                placeholder="Şifre"
                value={password}
                onChangeText={setPassword}
                secureTextEntry
              />
            </View>

            <View style={styles.inputContainer}>
              <Icon name="lock" size={20} color="#888" style={styles.inputIcon} />
              <TextInput
                style={styles.input}
                placeholder="Şifre Yeniden"
                value={password2}
                onChangeText={setPassword2}
                secureTextEntry
              />
            </View>

            {/* Şehir Seçimi Dropdown */}
            <View style={styles.dropdownContainer}>
              <Text style={styles.dropdownLabel}>Şehir Seçin</Text>
              <Picker
                selectedValue={selectedCity}
                onValueChange={(itemValue) => setSelectedCity(itemValue)}
                style={styles.picker}
              >
                <Picker.Item label="Şehir Seçin" value="" />
                {cities.map((city) => (
                  <Picker.Item
                    key={city.value}
                    label={city.label}
                    value={city.value}
                  />
                ))}
              </Picker>
            </View>

            <TouchableOpacity style={styles.button} onPress={handleSignUp}>
              <Text style={styles.buttonText}>Kaydol</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.button2}
              onPress={() => navigation.navigate("Login")}
            >
              <Text style={styles.linkText}>Giriş Yap</Text>
            </TouchableOpacity>
          </View>
        </ScrollView>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: "#FBEAD7",
  },
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#FBEAD7",
    padding: 20,
  },
  header: {
    fontSize: 28,
    fontWeight: "bold",
    marginBottom: 10,
  },
  inputContainer: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#FFF",
    borderWidth: 1,
    borderColor: "#E5E5E5",
    borderRadius: 8,
    paddingHorizontal: 10,
    width: "90%",
    height: 50,
    marginBottom: 15,
  },
  inputIcon: {
    marginRight: 10,
  },
  input: {
    flex: 1,
    fontSize: 16,
  },
  dropdownContainer: {
    width: "90%",
    marginBottom: 15,
  },
  dropdownLabel: {
    fontSize: 16,
    fontWeight: "bold",
    marginBottom: 5,
  },
  picker: {
    backgroundColor: "#FFF",
    borderWidth: 1,
    borderColor: "#E5E5E5",
    borderRadius: 8,
    height: 50,
    justifyContent: "center",
  },
  button: {
    width: "90%",
    height: 50,
    backgroundColor: "#5FC9C4",
    justifyContent: "center",
    alignItems: "center",
    borderRadius: 8,
    marginTop: 10,
  },
  button2: {
    width: "90%",
    height: 50,
    backgroundColor: "blue",
    justifyContent: "center",
    alignItems: "center",
    borderRadius: 8,
    marginTop: 10,
  },
  buttonText: {
    color: "#FFF",
    fontSize: 16,
    fontWeight: "bold",
  },
  linkText: {
    fontWeight: "bold",
    color: "white",
    fontSize: 16,
  },
});

export default SignupScreen;


***** login*****
import React, { useState } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  SafeAreaView,
  KeyboardAvoidingView,
  Platform,
} from "react-native";
import Icon from "react-native-vector-icons/FontAwesome";
import { signInWithEmailAndPassword } from "firebase/auth";
import { auth } from "../../../firebase";
import LottieView from "lottie-react-native";
import Loading from "../../components/Loading";

const LoginScreen = ({ navigation }) => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const handleLogin = async () => {
    setIsLoading(true);
    try {
      await signInWithEmailAndPassword(auth, email, password);
      console.log("Successfully logged in!");
    } catch (error) {
      console.error("Login error:", error.message);
    } finally {
      setIsLoading(false);
    }
  };

  if (isLoading) {
    return <Loading />;
  }

  return (
    <SafeAreaView style={styles.safeArea}>
      <KeyboardAvoidingView
        style={{ flex: 1,marginTop:30 }}
       
      >
        <ScrollView
          contentContainerStyle={{ flexGrow: 1 }}
          keyboardShouldPersistTaps="handled"
        >
          <View style={styles.container}>
            <Text style={styles.header}>Giriş Yap</Text>
            <Text style={styles.subHeader}>Hoşgeldiniz</Text>

            <LottieView
              source={require("../../../assets/icons/r2.json")}
              autoPlay
              loop
              style={{ height: 200, width: 200 }}
            />

            <View style={styles.inputContainer}>
              <Icon name="envelope" size={20} color="#888" style={styles.inputIcon} />
              <TextInput
                style={styles.input}
                placeholder="Email"
                value={email}
                onChangeText={(text) => setEmail(text.toLocaleLowerCase())}
                keyboardType="email-address"
              />
            </View>

            <View style={styles.inputContainer}>
              <Icon name="lock" size={20} color="#888" style={styles.inputIcon} />
              <TextInput
                style={styles.input}
                placeholder="Şifre"
                value={password}
                onChangeText={setPassword}
                secureTextEntry
              />
            </View>

            <TouchableOpacity style={styles.button} onPress={handleLogin}>
              <Text style={styles.buttonText}>Giriş Yap</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.button2}
              onPress={() => navigation.navigate("Signup")}
            >
              <Text style={styles.buttonText}>Kayıt Ol</Text>
            </TouchableOpacity>
          </View>
        </ScrollView>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: "#E0F5F7",
  },
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#E0F5F7",
    padding: 20,
  },
  header: {
    fontSize: 28,
    fontWeight: "bold",
    marginBottom: 10,
  },
  subHeader: {
    fontSize: 14,
    color: "#7E7E7E",
    marginBottom: 20,
  },
  inputContainer: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#FFF",
    borderWidth: 1,
    borderColor: "#E5E5E5",
    borderRadius: 8,
    paddingHorizontal: 10,
    width: "90%",
    height: 50,
    marginBottom: 15,
  },
  inputIcon: {
    marginRight: 10,
  },
  input: {
    flex: 1,
    fontSize: 16,
  },
  button: {
    width: "90%",
    height: 50,
    backgroundColor: "#A47EDE",
    justifyContent: "center",
    alignItems: "center",
    borderRadius: 8,
    marginTop: 10,
  },
  button2: {
    width: "90%",
    height: 50,
    backgroundColor: "brown",
    justifyContent: "center",
    alignItems: "center",
    borderRadius: 8,
    marginTop: 10,
  },
  buttonText: {
    color: "#FFF",
    fontSize: 16,
    fontWeight: "bold",
  },
});

export default LoginScreen;




