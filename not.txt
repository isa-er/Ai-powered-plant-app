APP .JS :

import { StatusBar } from 'expo-status-bar';
import { Button, StyleSheet, Text, TextInput, View, Alert} from 'react-native';
import { useState } from 'react';

import { db } from './firebase';
import { collection, addDoc } from 'firebase/firestore';
import { initializeApp } from 'firebase/app';
import {
  getAuth,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
} from 'firebase/auth';

import { doc, setDoc, getDoc } from 'firebase/firestore';

const auth = getAuth(); // Firebase Authentication


export default function App() {


  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [name, setName] = useState('');



  const handleSignUp = async () => {
    try {
      // Firebase Authentication ile kullanıcı kaydı
      const userCredential = await createUserWithEmailAndPassword(
        auth,
        email,
        password
      );
      const userId = userCredential.user.uid;

      // Firestore'daki "users" koleksiyonuna profil ekleme
      await setDoc(doc(db, 'users', userId), {
        email: email,
        name: name,
        createdAt: new Date(),
      });

      Alert.alert('Başarılı!', 'Kullanıcı kaydedildi ve profil oluşturuldu.');
      setEmail('');
      setPassword('');
      setName('');
    } catch (error) {
      console.error('Error signing up: ', error);
      Alert.alert('Hata!', error.message);
    }
  };




  
  const [isim, setisim] = useState('');
  // SADECE İSİM EKLEME-DENEME AMAÇLI
  const addUserToFirestore = async () => {
    try {
      // Firestore'daki "users" koleksiyonuna veri ekleme
      const docRef = await addDoc(collection(db, 'users'), {
        name: isim, // TextInput'tan alınan değer
        createdAt: new Date(), // Ek bilgi için tarih ekleyebilirsiniz
      });

      Alert.alert('Başarılı!', `Kullanıcı eklendi: ${docRef.id}`);
      setisim(''); // TextInput'u sıfırla
    } catch (error) {
      console.error('Error adding document: ', error);
      Alert.alert('Hata!', 'Kullanıcı eklenemedi.');
    }
  };



  const handleLogin = async () => {
    try {
      const userCredential = await signInWithEmailAndPassword(
        auth,
        email,
        password
      );
      const userId = userCredential.user.uid;

      // Firestore'dan kullanıcı profili çekme
      const userDoc = await getDoc(doc(db, 'users', userId));
      if (userDoc.exists()) {
        const userData = userDoc.data();
        Alert.alert(
          'Giriş Başarılı',
          `Hoş geldiniz, ${userData.name}! Email: ${userData.email}`
        );
      } else {
        Alert.alert('Hata!', 'Kullanıcı profili bulunamadı.');
      }

      setEmail('');
      setPassword('');
    } catch (error) {
      console.error('Error logging in: ', error);
      Alert.alert('Hata!', error.message);
    }
  };




  return (
    <View style={styles.container}>
      <TextInput
        style={{
          height: 40,
          borderColor: 'gray',
          borderWidth: 1,
          marginBottom: 10,
          paddingHorizontal: 10,
        }}
        placeholder="Adınızı girin"
        value={isim}
        onChangeText={text => setisim(text)} // Metni state'e kaydet
      />
      <Button title="Ekle" onPress={addUserToFirestore} />
      <StatusBar style="auto" />


      <TextInput
        style={{
          height: 40,
          borderColor: 'gray',
          borderWidth: 1,
          marginBottom: 10,
          paddingHorizontal: 10,
        }}
        placeholder="İsim"
        value={name}
        onChangeText={(text) => setName(text)}
      />
      <TextInput
        style={{
          height: 40,
          borderColor: 'gray',
          borderWidth: 1,
          marginBottom: 10,
          paddingHorizontal: 10,
        }}
        placeholder="Email"
        value={email}
        onChangeText={(text) => setEmail(text)}
      />
      <TextInput
        style={{
          height: 40,
          borderColor: 'gray',
          borderWidth: 1,
          marginBottom: 10,
          paddingHorizontal: 10,
        }}
        placeholder="Şifre"
        secureTextEntry
        value={password}
        onChangeText={(text) => setPassword(text)}
      />
      <Button title="Kayıt Ol" onPress={handleSignUp} />
      <View style={{ height: 10 }} />
      <Button title="Giriş Yap" onPress={handleLogin} />




    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});
******************************
SAFEAREA PROVIDER
import { StyleSheet, Text, View,StatusBar } from 'react-native'
import React from 'react'
import { SafeAreaView,SafeAreaProvider } from 'react-native-safe-area-context'

const Photo = () => {
  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Text>Home EKRANI GELDİ</Text>
      </SafeAreaView>
    </SafeAreaProvider>
  )
}

export default Photo

const styles = StyleSheet.create({
    container:{
        flex:1,
        backgroundColor:"yellow"
        
    }
})


****************** photo.js*************

import React, { useState } from "react";
import { View, Button, Image, Alert, StyleSheet, Text } from "react-native";
import * as ImagePicker from "expo-image-picker";

const Photo = () => {
  const [image, setImage] = useState(null);
  const [result, setResult] = useState(null);

  // Resim seçme işlemi
  const pickImage = async () => {
    // Galeriye erişim izni iste
    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
    if (status !== "granted") {
      Alert.alert(
        "Permission Denied",
        "We need access to your gallery to select an image."
      );
      return;
    }

    // Galeriden resim seç
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images, // Sadece resimleri seç
      allowsEditing: true, // Kullanıcıya kırpma seçeneği sun
      quality: 1, // Resim kalitesini koru
    });

    if (!result.canceled) {
      setImage(result.assets[0].uri); // Seçilen resmin URI'sini kaydet
    }
  };

  // Seçilen resmi API'ye gönder ve tahmin al
  const uploadImage = async () => {
    if (!image) {
      Alert.alert("No Image", "Please select an image first.");
      return;
    }

    const formData = new FormData();
    formData.append("file", {
      uri: image,
      name: "image.jpg",
      type: "image/jpeg",
    });

    try {
      const response = await fetch("https://fastapi-backend-3-q9m9.onrender.com/predict/", {
        method: "POST",
        body: formData,
        headers: {
          "Content-Type": "multipart/form-data",
        },
      });

      const result = await response.json();
      setResult(result);
    } catch (error) {
      console.error(error);
      Alert.alert("Error", "Failed to upload image.");
    }
  };

  return (
    <View style={styles.container}>
      <Button title="Select Image" onPress={pickImage} />
      {image && <Image source={{ uri: image }} style={styles.image} />}
      {image && <Button title="Upload & Predict" onPress={uploadImage} />}
      {result && (
        <View style={styles.resultContainer}>
          <Text style={styles.resultText}>
            Predicted Class: {result.predicted_class_name}
          </Text>
          <Text style={styles.resultText}>Confidence: {result.confidence}</Text>
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 20,
  },
  image: {
    width: 200,
    height: 200,
    marginVertical: 20,
  },
  resultContainer: {
    marginTop: 20,
    alignItems: "center",
  },
  resultText: {
    fontSize: 16,
    fontWeight: "bold",
  },
});

export default Photo;


********profile.js**********
import React from 'react';
import { View, Text, Button, StyleSheet, Alert } from 'react-native';
import { signOut } from 'firebase/auth';
import { auth } from '../../../firebase';

const Profile = () => {
  const handleSignOut = async () => {
    try {
      await signOut(auth); // Firebase çıkış işlemi
      Alert.alert('Çıkış Yapıldı', 'Başarıyla çıkış yaptınız!');
    } catch (error) {
      Alert.alert('Hata', 'Çıkış yapılırken bir hata oluştu.');
      console.error(error);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.text}>Profil Sayfası</Text>
      <Button title="Çıkış Yap" onPress={handleSignOut} />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'white',
  },
  text: {
    fontSize: 20,
    marginBottom: 20,
  },
});

export default Profile;
************************ photo en sonki 11.12.24*****
import React, { useState } from "react";
import { View, Button, Image, Alert, StyleSheet, Text } from "react-native";
import * as ImagePicker from "expo-image-picker";
import { getStorage, ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { collection, addDoc, query, where, getDocs } from "firebase/firestore";
import { db } from "../../../firebase"; // Firestore bağlantısını import ediyoruz
import { getAuth } from "firebase/auth";

const Photo = () => {


  const auth = getAuth();
  const currentUser = auth.currentUser;

  if (!currentUser) {
    console.error("No user is logged in.");
    return <Text>Error: No user is logged in.</Text>;
  }

  const userEmail = currentUser.email; // Oturum açmış kullanıcının e-posta adresi
  console.log("User Email from Firebase Auth:", userEmail);



  const [image, setImage] = useState(null);
  const [result, setResult] = useState(null);

  // Kullanıcının Firestore belgesini e-posta ile bulma
  const getUserDocumentByEmail = async (email) => {
    const usersRef = collection(db, "users");
    const q = query(usersRef, where("email", "==", email));
    const querySnapshot = await getDocs(q);

    if (querySnapshot.empty) {
      throw new Error("User not found");
    }

    return querySnapshot.docs[0].ref;
  };

  // Resim seçme işlemi
  const pickImage = async () => {
    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
    if (status !== "granted") {
      Alert.alert(
        "Permission Denied",
        "We need access to your gallery to select an image."
      );
      return;
    }

    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      quality: 1,
    });

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  // Firebase'e fotoğraf yükleme ve tahmin sonuçlarını kaydetme
  const uploadImage = async () => {
    if (!image) {
      Alert.alert("No Image", "Please select an image first.");
      return;
    }

    const storage = getStorage();
    const filename = image.substring(image.lastIndexOf("/") + 1);
    const storageRef = ref(storage, `user_images/${filename}`);

    try {
      // Firebase Storage'a resmi yükleme
      const response = await fetch(image);
      const blob = await response.blob();
      await uploadBytes(storageRef, blob);
      const imageUrl = await getDownloadURL(storageRef);

      // Tahmin işlemi
      const formData = new FormData();
      formData.append("file", {
        uri: image,
        name: "image.jpg",
        type: "image/jpeg",
      });

      const apiResponse = await fetch(
        "https://fastapi-backend-3-q9m9.onrender.com/predict/",
        {
          method: "POST",
          body: formData,
          headers: {
            "Content-Type": "multipart/form-data",
          },
        }
      );

      const predictionResult = await apiResponse.json();
      setResult(predictionResult);

      // Firestore'a tahmin sonuçlarını kaydetme
      await savePredictionToFirestore(userEmail, imageUrl, predictionResult);

      setImage(null);
      setResult(null);
      Alert.alert("Success", "Prediction completed and state reset.");

    } catch (error) {
      console.error("Error during upload or save:", error);
      Alert.alert("Error", "An error occurred while uploading the image.");
    }
  };

  const savePredictionToFirestore = async (userEmail, imageUrl, predictionResult) => {
    try {
      // Kullanıcının belgesine e-posta ile ulaş
      const userRef = await getUserDocumentByEmail(userEmail);

      // predictions alt koleksiyonuna referans
      const predictionsRef = collection(userRef, "predictions");

      // Yeni tahmin ekle
      await addDoc(predictionsRef, {
        imageUrl: imageUrl,
        result: predictionResult.predicted_class_name,
        confidence: predictionResult.confidence,
        timestamp: new Date(),
      });

      Alert.alert("Success", "Prediction saved successfully.");
    } catch (error) {
      console.error("Error saving prediction to Firestore:", error);
      Alert.alert("Error", "Failed to save prediction.");
    }
  };


  console.log("Received userEmail:", userEmail);

  return (
    <View style={styles.container}>
      <Button title="Select Image" onPress={pickImage} />
      {image && <Image source={{ uri: image }} style={styles.image} />}
      {image && <Button title="Upload & Predict" onPress={uploadImage} />}
      {result && (
        <View style={styles.resultContainer}>
          <Text style={styles.resultText}>
            Predicted Class: {result.predicted_class_name}
          </Text>
          <Text style={styles.resultText}>Confidence: {result.confidence}</Text>
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 20,
  },
  image: {
    width: 200,
    height: 200,
    marginVertical: 20,
  },
  resultContainer: {
    marginTop: 20,
    alignItems: "center",
  },
  resultText: {
    fontSize: 16,
    fontWeight: "bold",
  },
});

export default Photo;
----------profile----------
import React, { useEffect, useState } from "react";
import { View, Text, StyleSheet, Alert, Image, FlatList } from "react-native";
import { collection, query, where, onSnapshot, doc,getDocs} from "firebase/firestore";
import { db } from "../../../firebase";
import { getAuth } from "firebase/auth";
import Loading from "../../components/Loading";

const Profile = () => {



  const auth = getAuth();
  const currentUser = auth.currentUser;

  if (!currentUser) {
    console.error("No user is logged in.");
    return <Text>Error: No user is logged in.</Text>;
  }

  const userEmail = currentUser.email; // Oturum açmış kullanıcının e-posta adresi
  console.log("User Email from Firebase Auth:", userEmail)

  const [predictions, setPredictions] = useState([]);

  const getUserIdByEmail = async (email) => {
    const usersRef = collection(db, "users");
    const q = query(usersRef, where("email", "==", email));
    const querySnapshot = await getDocs(q);

    if (querySnapshot.empty) {
      throw new Error("No user found with the given email");
    }

    return querySnapshot.docs[0].id; // Belge ID'si (userId)
  };

  useEffect(() => {
    let unsubscribe; // Dinleyiciyi sonlandırmak için referans

    const subscribeToPredictions = async () => {
      try {
        // Kullanıcı ID'sini email'e göre bul
        const userId = await getUserIdByEmail(userEmail);

        // predictions alt koleksiyonuna eriş
        const predictionsRef = collection(db, "users", userId, "predictions");

        // Firestore realtime listener
        unsubscribe = onSnapshot(predictionsRef, (snapshot) => {
          const updatedPredictions = [];
          snapshot.forEach((doc) => {
            updatedPredictions.push({ id: doc.id, ...doc.data() });
          });
          setPredictions(updatedPredictions);
        });
      } catch (error) {
        console.error("Error fetching predictions:", error);
        Alert.alert("Error", "Failed to fetch predictions.");
      }
    };

    subscribeToPredictions();

    // Cleanup: Dinleyiciyi kaldır
    return () => {
      if (unsubscribe) {
        unsubscribe();
      }
    };
  }, [userEmail]);

  const renderPrediction = ({ item }) => (
    <View style={styles.card}>
      <Image source={{ uri: item.imageUrl }} style={styles.image} />
      <Text style={styles.resultText}>Class: {item.result}</Text>
      <Text style={styles.resultText}>
        Confidence: {item.confidence.toFixed(2)}
      </Text>
      <Text style={styles.timestamp}>
        Date: {new Date(item.timestamp?.seconds * 1000).toLocaleString()}
      </Text>
    </View>
  );

  return (
    <View style={styles.container}>
      <Text style={styles.text}>Tahminler</Text>
      <FlatList
        data={predictions}
        keyExtractor={(item) => item.id}
        renderItem={renderPrediction}
        ListEmptyComponent={<Loading/>}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: "white",
  },
  text: {
    fontSize: 20,
    marginBottom: 20,
    textAlign: "center",
  },
  card: {
    backgroundColor: "#f0f0f0",
    padding: 15,
    marginVertical: 10,
    borderRadius: 10,
    borderWidth: 1,
    alignItems: "center",
  },
  image: {
    width: 200,
    height: 200,
    marginBottom: 10,
    borderRadius: 10,
  },
  resultText: {
    fontSize: 16,
    fontWeight: "bold",
    marginBottom: 5,
  },
  timestamp: {
    fontSize: 14,
    color: "gray",
  },
});

export default Profile;
********* photo son hali***********
import React, { useState } from "react";
import { View, Alert, StyleSheet, Text, TouchableOpacity, Image } from "react-native";
import * as ImagePicker from "expo-image-picker";
import { getStorage, ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { collection, addDoc, query, where, getDocs } from "firebase/firestore";
import { db } from "../../../firebase"; // Firestore bağlantısını import ediyoruz
import { getAuth } from "firebase/auth";
import Icon from "react-native-vector-icons/FontAwesome";
import TahminEdiliyor from "../../components/TahminEdiliyor"

const Photo = () => {
  const auth = getAuth();
  const currentUser = auth.currentUser;

  if (!currentUser) {
    console.error("No user is logged in.");
    return <Text>Error: No user is logged in.</Text>;
  }

  const userEmail = currentUser.email; // Oturum açmış kullanıcının e-posta adresi
  console.log("User Email from Firebase Auth:", userEmail);

  const [image, setImage] = useState(null);
  const [result, setResult] = useState(null);
  const [loading, setloading] = useState(false)

  // Galeriden resim seçme işlemi
  const pickImage = async () => {
    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
    if (status !== "granted") {
      Alert.alert(
        "Permission Denied",
        "We need access to your gallery to select an image."
      );
      return;
    }

    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ["images"],
      allowsEditing: true,
      quality: 1,
    });

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  // Kameradan fotoğraf çekme işlemi
  const takePhoto = async () => {
    const { status } = await ImagePicker.requestCameraPermissionsAsync();
    if (status !== "granted") {
      Alert.alert(
        "Permission Denied",
        "We need access to your camera to take a photo."
      );
      return;
    }

    const result = await ImagePicker.launchCameraAsync({
      mediaTypes: ["images"],
      allowsEditing: true,
      quality: 1,
    });

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  if(loading){
    return <TahminEdiliyor/>
  }



  // Resmi yükle ve tahmin işlemi yap
  const uploadAndPredict = async () => {

    setloading(true)

    if (!image) {
      Alert.alert("No Image", "Please select or capture an image first.");
      return;
    }

    const storage = getStorage();
    const filename = image.substring(image.lastIndexOf("/") + 1);
    const storageRef = ref(storage, `user_images/${filename}`);

    try {
      // Firebase Storage'a resmi yükle
      const response = await fetch(image);
      const blob = await response.blob();
      await uploadBytes(storageRef, blob);
      const imageUrl = await getDownloadURL(storageRef);

      // API'ye resmi gönder ve tahmin al
      const formData = new FormData();
      formData.append("file", {
        uri: image,
        name: "image.jpg",
        type: "image/jpeg",
      });

      const apiResponse = await fetch(
        "https://fastapi-backend-3-q9m9.onrender.com/predict/",
        {
          method: "POST",
          body: formData,
          headers: {
            "Content-Type": "multipart/form-data",
          },
        }
      );

      const predictionResult = await apiResponse.json();
      setResult(predictionResult);

      // Tahmin sonuçlarını veritabanına kaydet
      await savePredictionToFirestore(userEmail, imageUrl, predictionResult);
      setloading(false)
      Alert.alert("Success", "Prediction completed!");
    } catch (error) {
      console.error("Error during upload or predict:", error);
      Alert.alert("Error", "An error occurred while processing the image.");
    }
  };

  const savePredictionToFirestore = async (userEmail, imageUrl, predictionResult) => {
    try {
      const usersRef = collection(db, "users");
      const q = query(usersRef, where("email", "==", userEmail));
      const querySnapshot = await getDocs(q);

      if (querySnapshot.empty) {
        throw new Error("User not found");
      }

      const userDocRef = querySnapshot.docs[0].ref;
      const predictionsRef = collection(userDocRef, "predictions");

      await addDoc(predictionsRef, {
        imageUrl: imageUrl,
        result: predictionResult.predicted_class_name,
        confidence: predictionResult.confidence,
        timestamp: new Date(),
      });
    } catch (error) {
      console.error("Error saving prediction to Firestore:", error);
      Alert.alert("Error", "Failed to save prediction.");
    }
  };

  return (
    <View style={styles.container}>
      <TouchableOpacity style={styles.button} onPress={pickImage}>
        <Icon name="upload" size={50} color="#FFF" style={styles.icon} />
        <Text style={styles.buttonText}>Select from Gallery</Text>
      </TouchableOpacity>

      <TouchableOpacity style={[styles.button, styles.cameraButton]} onPress={takePhoto}>
        <Icon name="camera" size={50} color="#FFF" style={styles.icon} />
        <Text style={styles.buttonText}>Take Photo</Text>
      </TouchableOpacity>

      {image && (
        <>
          <Image source={{ uri: image }} style={styles.image} />
          <TouchableOpacity style={[styles.button, styles.predictButton]} onPress={uploadAndPredict}>
            <Icon name="cloud-upload" size={50} color="#FFF" style={styles.icon} />
            <Text style={styles.buttonText}>Upload & Predict</Text>
          </TouchableOpacity>
        </>
      )}

      {result && (
        <View style={styles.resultCard}>
          <Text style={styles.resultText}>Class: {result.predicted_class_name}</Text>
          <Text style={styles.resultText}>Confidence: {result.confidence.toFixed(2)}</Text>
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 20,
    backgroundColor: "#F0F4F8",
  },
  button: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "#5FC9C4",
    width: "80%",
    paddingVertical: 15,
    borderRadius: 10,
    marginBottom: 20,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 5,
    elevation: 3,
  },
  cameraButton: {
    backgroundColor: "#A47EDE",
  },
  predictButton: {
    backgroundColor: "#FF8C00",
    marginTop: 20,
  },
  icon: {
    marginRight: 10,
  },
  buttonText: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#FFF",
  },
  image: {
    width: 200,
    height: 200,
    marginTop: 20,
    borderRadius: 10,
  },
  resultCard: {
    marginTop: 20,
    padding: 15,
    backgroundColor: "#FFF",
    borderRadius: 10,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 5,
    elevation: 3,
    alignItems: "center",
    width: "80%",
  },
  resultText: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
  },
});

export default Photo;
****************PHOTO 17.12***********
import React, { useState } from "react";
import { View, Alert, StyleSheet, Text, TouchableOpacity, Image } from "react-native";
import * as ImagePicker from "expo-image-picker";
import { getStorage, ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { collection, addDoc, query, where, getDocs } from "firebase/firestore";
import { db } from "../../../firebase"; // Firestore bağlantısını import ediyoruz
import { getAuth } from "firebase/auth";
import Icon from "react-native-vector-icons/FontAwesome";
import TahminEdiliyor from "../../components/TahminEdiliyor"

const Photo = () => {
  const auth = getAuth();
  const currentUser = auth.currentUser;

  if (!currentUser) {
    console.error("No user is logged in.");
    return <Text>Error: No user is logged in.</Text>;
  }

  const userEmail = currentUser.email; // Oturum açmış kullanıcının e-posta adresi
  console.log("User Email from Firebase Auth:", userEmail);

  const [image, setImage] = useState(null);
  const [result, setResult] = useState(null);
  const [loading, setloading] = useState(false)

  // Galeriden resim seçme işlemi
  const pickImage = async () => {
    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
    if (status !== "granted") {
      Alert.alert(
        "Permission Denied",
        "We need access to your gallery to select an image."
      );
      return;
    }

    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ["images"],
      allowsEditing: true,
      quality: 1,
    });

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  // Kameradan fotoğraf çekme işlemi
  const takePhoto = async () => {
    const { status } = await ImagePicker.requestCameraPermissionsAsync();
    if (status !== "granted") {
      Alert.alert(
        "Permission Denied",
        "We need access to your camera to take a photo."
      );
      return;
    }

    const result = await ImagePicker.launchCameraAsync({
      mediaTypes: ["images"],
      allowsEditing: true,
      quality: 1,
    });

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  if(loading){
    return <TahminEdiliyor/>
  }



  // Resmi yükle ve tahmin işlemi yap
  const uploadAndPredict = async () => {

    setloading(true)

    if (!image) {
      Alert.alert("No Image", "Please select or capture an image first.");
      return;
    }

    const storage = getStorage();
    const filename = image.substring(image.lastIndexOf("/") + 1);
    const storageRef = ref(storage, `user_images/${filename}`);

    try {
      // Firebase Storage'a resmi yükle
      const response = await fetch(image);
      const blob = await response.blob();
      await uploadBytes(storageRef, blob);
      const imageUrl = await getDownloadURL(storageRef);

      // API'ye resmi gönder ve tahmin al
      const formData = new FormData();
      formData.append("file", {
        uri: image,
        name: "image.jpg",
        type: "image/jpeg",
      });

      const apiResponse = await fetch(
        "https://fastapi-backend-3-q9m9.onrender.com/predict/",
        {
          method: "POST",
          body: formData,
          headers: {
            "Content-Type": "multipart/form-data",
          },
        }
      );

      const predictionResult = await apiResponse.json();
      setResult(predictionResult);

      // Tahmin sonuçlarını veritabanına kaydet
      await savePredictionToFirestore(userEmail, imageUrl, predictionResult);
      setloading(false)
      Alert.alert("Success", "Prediction completed!");
    } catch (error) {
      console.error("Error during upload or predict:", error);
      Alert.alert("Error", "An error occurred while processing the image.");
    }
  };

  const savePredictionToFirestore = async (userEmail, imageUrl, predictionResult) => {
    try {
      const usersRef = collection(db, "users");
      const q = query(usersRef, where("email", "==", userEmail));
      const querySnapshot = await getDocs(q);

      if (querySnapshot.empty) {
        throw new Error("User not found");
      }

      const userDocRef = querySnapshot.docs[0].ref;
      const predictionsRef = collection(userDocRef, "predictions");

      await addDoc(predictionsRef, {
        imageUrl: imageUrl,
        result: predictionResult.predicted_class_name,
        confidence: predictionResult.confidence,
        timestamp: new Date(),
      });
    } catch (error) {
      console.error("Error saving prediction to Firestore:", error);
      Alert.alert("Error", "Failed to save prediction.");
    }
  };

  return (
    <View style={styles.container}>
      <TouchableOpacity style={styles.button} onPress={pickImage}>
        <Icon name="upload" size={50} color="#FFF" style={styles.icon} />
        <Text style={styles.buttonText}>Select from Gallery</Text>
      </TouchableOpacity>

      <TouchableOpacity style={[styles.button, styles.cameraButton]} onPress={takePhoto}>
        <Icon name="camera" size={50} color="#FFF" style={styles.icon} />
        <Text style={styles.buttonText}>Take Photo</Text>
      </TouchableOpacity>

      {image && (
        <>
          <Image source={{ uri: image }} style={styles.image} />
          <TouchableOpacity style={[styles.button, styles.predictButton]} onPress={uploadAndPredict}>
            <Icon name="cloud-upload" size={50} color="#FFF" style={styles.icon} />
            <Text style={styles.buttonText}>Upload & Predict</Text>
          </TouchableOpacity>
        </>
      )}

      {result && (
        <View style={styles.resultCard}>
          <Text style={styles.resultText}>Class: {result.predicted_class_name}</Text>
          <Text style={styles.resultText}>Confidence: {result.confidence.toFixed(2)}</Text>
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 20,
    backgroundColor: "#F0F4F8",
  },
  button: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "#5FC9C4",
    width: "80%",
    paddingVertical: 15,
    borderRadius: 10,
    marginBottom: 20,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 5,
    elevation: 3,
  },
  cameraButton: {
    backgroundColor: "#A47EDE",
  },
  predictButton: {
    backgroundColor: "#FF8C00",
    marginTop: 20,
  },
  icon: {
    marginRight: 10,
  },
  buttonText: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#FFF",
  },
  image: {
    width: 200,
    height: 200,
    marginTop: 20,
    borderRadius: 10,
  },
  resultCard: {
    marginTop: 20,
    padding: 15,
    backgroundColor: "#FFF",
    borderRadius: 10,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 5,
    elevation: 3,
    alignItems: "center",
    width: "80%",
  },
  resultText: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
  },
});

export default Photo;
******PHOTO****import React, { useState } from "react";
import { View, Alert, StyleSheet, Text, TouchableOpacity, Image } from "react-native";
import * as ImagePicker from "expo-image-picker";
import { getStorage, ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { collection, addDoc, query, where, getDocs } from "firebase/firestore";
import { db } from "../../../firebase"; // Firestore bağlantısını import ediyoruz
import { getAuth } from "firebase/auth";
import Icon from "react-native-vector-icons/FontAwesome";
import TahminEdiliyor from "../../components/TahminEdiliyor";

const Photo = () => {
  const auth = getAuth();
  const currentUser = auth.currentUser;

  if (!currentUser) {
    console.error("No user is logged in.");
    return <Text>Error: No user is logged in.</Text>;
  }

  const userEmail = currentUser.email; // Oturum açmış kullanıcının e-posta adresi
  console.log("User Email from Firebase Auth:", userEmail);

  const [image, setImage] = useState(null);
  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(false);

  // Kullanıcı uyarısı
  const showWarningAndProceed = async (action) => {
    Alert.alert(
      "Uyarı",
      "Tahmin işlemleri kesinlikle doğru sonuç olmayabilir. Lütfen yetkili birimlere başvurmayı unutmayınız.",
      [
        {
          text: "Tamam",
          onPress: action, // Kullanıcı Tamam'a bastığında işlem devam eder
        },
      ],
      { cancelable: true }
    );
  };

  // Galeriden resim seçme işlemi
  const pickImage = async () => {
    const proceed = async () => {
      const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
      if (status !== "granted") {
        Alert.alert(
          "Permission Denied",
          "We need access to your gallery to select an image."
        );
        return;
      }

      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        quality: 1,
      });

      if (!result.canceled) {
        setImage(result.assets[0].uri);
      }
    };

    showWarningAndProceed(proceed);
  };

  // Kameradan fotoğraf çekme işlemi
  const takePhoto = async () => {
    const proceed = async () => {
      const { status } = await ImagePicker.requestCameraPermissionsAsync();
      if (status !== "granted") {
        Alert.alert(
          "Permission Denied",
          "We need access to your camera to take a photo."
        );
        return;
      }

      const result = await ImagePicker.launchCameraAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        quality: 1,
      });

      if (!result.canceled) {
        setImage(result.assets[0].uri);
      }
    };

    showWarningAndProceed(proceed);
  };

  if (loading) {
    return <TahminEdiliyor />;
  }

  return (
    <View style={styles.container}>
      <TouchableOpacity style={styles.button} onPress={pickImage}>
        <Icon name="upload" size={50} color="#FFF" style={styles.icon} />
        <Text style={styles.buttonText}>Select from Gallery</Text>
      </TouchableOpacity>

      <TouchableOpacity style={[styles.button, styles.cameraButton]} onPress={takePhoto}>
        <Icon name="camera" size={50} color="#FFF" style={styles.icon} />
        <Text style={styles.buttonText}>Take Photo</Text>
      </TouchableOpacity>

      {image && (
        <>
          <Image source={{ uri: image }} style={styles.image} />
          <TouchableOpacity style={[styles.button, styles.predictButton]} onPress={uploadAndPredict}>
            <Icon name="cloud-upload" size={50} color="#FFF" style={styles.icon} />
            <Text style={styles.buttonText}>Upload & Predict</Text>
          </TouchableOpacity>
        </>
      )}

      {result && (
        <View style={styles.resultCard}>
          <Text style={styles.resultText}>Class: {result.predicted_class_name}</Text>
          <Text style={styles.resultText}>Confidence: {result.confidence.toFixed(2)}</Text>
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 20,
    backgroundColor: "#F0F4F8",
  },
  button: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "#5FC9C4",
    width: "80%",
    paddingVertical: 15,
    borderRadius: 10,
    marginBottom: 20,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 5,
    elevation: 3,
  },
  cameraButton: {
    backgroundColor: "#A47EDE",
  },
  predictButton: {
    backgroundColor: "#FF8C00",
    marginTop: 20,
  },
  icon: {
    marginRight: 10,
  },
  buttonText: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#FFF",
  },
  image: {
    width: 200,
    height: 200,
    marginTop: 20,
    borderRadius: 10,
  },
  resultCard: {
    marginTop: 20,
    padding: 15,
    backgroundColor: "#FFF",
    borderRadius: 10,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 5,
    elevation: 3,
    alignItems: "center",
    width: "80%",
  },
  resultText: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
  },
});

export default Photo;

****** MODAL KULLANIMI****
import React, { useState } from "react";
import {
  View,
  Alert,
  StyleSheet,
  Text,
  TouchableOpacity,
  Image,
  FlatList,
  Modal,
} from "react-native";
import * as ImagePicker from "expo-image-picker";
import Icon from "react-native-vector-icons/FontAwesome";

const Photo = () => {
  const [image, setImage] = useState(null);
  const [result, setResult] = useState(null);
  const [modalVisible, setModalVisible] = useState(false);

  // Meyve Listesi
  const fruitList = [
    { id: "1", name: "Elma", image: require("../../../assets/icons/apple.png") },
    { id: "2", name: "Üzüm", image: require("../../../assets/icons/grape.png") },
    { id: "3", name: "Kiraz", image: require("../../../assets/icons/cherries.png") },
    { id: "4", name: "Dolma Biber", image: require("../../../assets/icons/food-and-restaurant.png") },
    { id: "5", name: "Kahve", image: require("../../../assets/icons/coffee-beans.png") },
    { id: "6", name: "Mısır", image: require("../../../assets/icons/corn.png") },
    { id: "7", name: "Pamuk", image: require("../../../assets/icons/cotton.png") },
    { id: "8", name: "Şeftali", image: require("../../../assets/icons/peach.png") },
    { id: "9", name: "Patates", image: require("../../../assets/icons/potato.png") },
    { id: "10", name: "Pirinç", image: require("../../../assets/icons/rice.png") },
    { id: "11", name: "Çilek", image: require("../../../assets/icons/strawberry.png") },
    { id: "12", name: "Şeker Kamışı", image: require("../../../assets/icons/sugarcane.png") },
    { id: "13", name: "Domates", image: require("../../../assets/icons/tomato.png") },
    { id: "14", name: "Bal Kabağı", image: require("../../../assets/icons/food.png") },
  ];

  const renderFruit = ({ item }) => (
    <View style={styles.fruitItem}>
      <Image source={item.image} style={styles.fruitImage} />
      <Text style={styles.fruitName}>{item.name}</Text>
    </View>
  );

  return (
    <View style={styles.container}>
      {/* Galeri ve Kamera Butonları */}
      <TouchableOpacity style={styles.button}>
        <Icon name="upload" size={50} color="#FFF" style={styles.icon} />
        <Text style={styles.buttonText}>Select from Gallery</Text>
      </TouchableOpacity>

      <TouchableOpacity style={[styles.button, styles.cameraButton]}>
        <Icon name="camera" size={50} color="#FFF" style={styles.icon} />
        <Text style={styles.buttonText}>Take Photo</Text>
      </TouchableOpacity>

      {/* Info Butonu */}
      <TouchableOpacity
        style={styles.infoButton}
        onPress={() => setModalVisible(true)}
      >
        <Icon name="info" size={20} color="#FFF" />
      </TouchableOpacity>

      {/* Modal */}
      <Modal
        visible={modalVisible}
        animationType="slide"
        transparent={true}
        onRequestClose={() => setModalVisible(false)}
      >
        <View style={styles.modalContainer}>
          <Text style={styles.modalTitle}>Tüm bitki çeşitlerimiz şunlardır:</Text>
          <FlatList
            data={fruitList}
            keyExtractor={(item) => item.id}
            renderItem={renderFruit}
          />
          <TouchableOpacity
            style={styles.closeButton}
            onPress={() => setModalVisible(false)}
          >
            <Text style={styles.closeButtonText}>Kapat</Text>
          </TouchableOpacity>
        </View>
      </Modal>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#F0F4F8",
    padding: 20,
  },
  button: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "#5FC9C4",
    width: "80%",
    paddingVertical: 15,
    borderRadius: 10,
    marginBottom: 20,
  },
  cameraButton: {
    backgroundColor: "#A47EDE",
  },
  icon: {
    marginRight: 10,
  },
  buttonText: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#FFF",
  },
  infoButton: {
    position: "absolute",
    bottom: 50,
    right: 20,
    backgroundColor: "#FF8C00",
    width: 50,
    height: 50,
    justifyContent: "center",
    alignItems: "center",
    borderRadius: 25,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 5,
    elevation: 3,
  },
  modalContainer: {
    flex: 1,
    backgroundColor: "#FFF",
    marginTop: "30%",
    marginHorizontal: "5%",
    borderRadius: 20,
    padding: 20,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 10,
    elevation: 5,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: "bold",
    marginBottom: 20,
    textAlign: "center",
  },
  fruitItem: {
    flexDirection: "row",
    alignItems: "center",
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: "#E0E0E0",
  },
  fruitImage: {
    width: 40,
    height: 40,
    marginRight: 15,
  },
  fruitName: {
    fontSize: 16,
  },
  closeButton: {
    marginTop: 20,
    alignSelf: "center",
    backgroundColor: "#FF5C5C",
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 10,
  },
  closeButtonText: {
    color: "#FFF",
    fontSize: 16,
    fontWeight: "bold",
  },
});

export default Photo;

************PHOTO SON *******
import React, { useState } from "react";
import { View, Alert, StyleSheet, Text, TouchableOpacity, Image ,Modal,FlatList} from "react-native";
import * as ImagePicker from "expo-image-picker";
import { getStorage, ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { collection, addDoc, query, where, getDocs } from "firebase/firestore";
import { db } from "../../../firebase"; // Firestore bağlantısını import ediyoruz
import { getAuth } from "firebase/auth";
import Icon from "react-native-vector-icons/FontAwesome";
import TahminEdiliyor from "../../components/TahminEdiliyor";

const Photo = () => {
  const auth = getAuth();
  const currentUser = auth.currentUser;

  if (!currentUser) {
    console.error("No user is logged in.");
    return <Text>Error: No user is logged in.</Text>;
  }

  const userEmail = currentUser.email; // Oturum açmış kullanıcının e-posta adresi
  console.log("User Email from Firebase Auth:", userEmail);

  const [image, setImage] = useState(null);
  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);


   // Meyve Listesi
   const fruitList = [
    { id: "1", name: "Elma", image: require("../../../assets/icons/apple.png") },
    { id: "2", name: "Üzüm", image: require("../../../assets/icons/grape.png") },
    { id: "3", name: "Kiraz", image: require("../../../assets/icons/cherries.png") },
    { id: "4", name: "Dolma Biber", image: require("../../../assets/icons/food-and-restaurant.png") },
    { id: "5", name: "Kahve", image: require("../../../assets/icons/coffee-beans.png") },
    { id: "6", name: "Mısır", image: require("../../../assets/icons/corn.png") },
    { id: "7", name: "Pamuk", image: require("../../../assets/icons/cotton.png") },
    { id: "8", name: "Şeftali", image: require("../../../assets/icons/peach.png") },
    { id: "9", name: "Patates", image: require("../../../assets/icons/potato.png") },
    { id: "10", name: "Pirinç", image: require("../../../assets/icons/rice.png") },
    { id: "11", name: "Çilek", image: require("../../../assets/icons/strawberry.png") },
    { id: "12", name: "Şeker Kamışı", image: require("../../../assets/icons/sugarcane.png") },
    { id: "13", name: "Domates", image: require("../../../assets/icons/tomato.png") },
    { id: "14", name: "Bal Kabağı", image: require("../../../assets/icons/food.png") },
  ];

  const renderFruit = ({ item }) => (
    <View style={styles.fruitItem}>
      <Image source={item.image} style={styles.fruitImage} />
      <Text style={styles.fruitName}>{item.name}</Text>
    </View>
  );




  // Kullanıcı uyarısı
  const showWarningAndProceed = async (action) => {
    Alert.alert(
      "Uyarı",
      "Tahmin işlemleri kesinlikle doğru sonuç olmayabilir. Lütfen yetkili birimlere başvurmayı unutmayınız.",
      [
        {
          text: "Tamam",
          onPress: action, // Kullanıcı Tamam'a bastığında işlem devam eder
        },
      ],
      { cancelable: true }
    );
  };

  // Galeriden resim seçme işlemi
  const pickImage = async () => {
    const proceed = async () => {
      const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
      if (status !== "granted") {
        Alert.alert(
          "Permission Denied",
          "We need access to your gallery to select an image."
        );
        return;
      }

      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ["images"],
        allowsEditing: true,
        quality: 1,
      });

      if (!result.canceled) {
        setImage(result.assets[0].uri);
      }
    };

    showWarningAndProceed(proceed);
  };

  // Kameradan fotoğraf çekme işlemi
  const takePhoto = async () => {
    const proceed = async () => {
      const { status } = await ImagePicker.requestCameraPermissionsAsync();
      if (status !== "granted") {
        Alert.alert(
          "Permission Denied",
          "We need access to your camera to take a photo."
        );
        return;
      }

      const result = await ImagePicker.launchCameraAsync({
        mediaTypes: ["images"],
        allowsEditing: true,
        quality: 1,
      });

      if (!result.canceled) {
        setImage(result.assets[0].uri);
      }
    };

    showWarningAndProceed(proceed);
  };

  if (loading) {
    return <TahminEdiliyor />;
  }


  // Resmi yükle ve tahmin işlemi yap
  const uploadAndPredict = async () => {

    setLoading(true)

    if (!image) {
      Alert.alert("No Image", "Please select or capture an image first.");
      return;
    }

    const storage = getStorage();
    const filename = image.substring(image.lastIndexOf("/") + 1);
    const storageRef = ref(storage, `user_images/${filename}`);

    try {
      // Firebase Storage'a resmi yükle
      const response = await fetch(image);
      const blob = await response.blob();
      await uploadBytes(storageRef, blob);
      const imageUrl = await getDownloadURL(storageRef);

      // API'ye resmi gönder ve tahmin al
      const formData = new FormData();
      formData.append("file", {
        uri: image,
        name: "image.jpg",
        type: "image/jpeg",
      });

      const apiResponse = await fetch(
        "https://fastapi-backend-3-q9m9.onrender.com/predict/",
        {
          method: "POST",
          body: formData,
          headers: {
            "Content-Type": "multipart/form-data",
          },
        }
      );

      const predictionResult = await apiResponse.json();
      setResult(predictionResult);

      // Tahmin sonuçlarını veritabanına kaydet
      await savePredictionToFirestore(userEmail, imageUrl, predictionResult);
      setLoading(false)
      
      Alert.alert("Success", "Prediction completed!");
      
    } catch (error) {
      console.error("Error during upload or predict:", error);
      Alert.alert("Error", "An error occurred while processing the image.");
    }
  };

  const savePredictionToFirestore = async (userEmail, imageUrl, predictionResult) => {
    try {
      const usersRef = collection(db, "users");
      const q = query(usersRef, where("email", "==", userEmail));
      const querySnapshot = await getDocs(q);

      if (querySnapshot.empty) {
        throw new Error("User not found");
      }

      const userDocRef = querySnapshot.docs[0].ref;
      const predictionsRef = collection(userDocRef, "predictions");

      await addDoc(predictionsRef, {
        imageUrl: imageUrl,
        result: predictionResult.predicted_class_name,
        confidence: predictionResult.confidence,
        timestamp: new Date(),
      });
    } catch (error) {
      console.error("Error saving prediction to Firestore:", error);
      Alert.alert("Error", "Failed to save prediction.");
    }
  };

  return (
    <View style={styles.container}>
      <TouchableOpacity style={styles.button} onPress={pickImage}>
        <Icon name="upload" size={50} color="#FFF" style={styles.icon} />
        <Text style={styles.buttonText}>Select from Gallery</Text>
      </TouchableOpacity>

      <TouchableOpacity style={[styles.button, styles.cameraButton]} onPress={takePhoto}>
        <Icon name="camera" size={50} color="#FFF" style={styles.icon} />
        <Text style={styles.buttonText}>Take Photo</Text>
      </TouchableOpacity>


      {/* Info Butonu */}
      <TouchableOpacity
        style={styles.infoButton}
        onPress={() => setModalVisible(true)}
      >
        <Icon name="info" size={20} color="#FFF" />
      </TouchableOpacity>

      {/* Modal */}
      <Modal
        visible={modalVisible}
        animationType="slide"
        transparent={true}
        onRequestClose={() => setModalVisible(false)}
      >
        <View style={styles.modalContainer}>
          <Text style={styles.modalTitle}>Tüm bitki çeşitlerimiz şunlardır:</Text>
          <FlatList
            data={fruitList}
            keyExtractor={(item) => item.id}
            renderItem={renderFruit}
          />
          <TouchableOpacity
            style={styles.closeButton}
            onPress={() => setModalVisible(false)}
          >
            <Text style={styles.closeButtonText}>Kapat</Text>
          </TouchableOpacity>
        </View>
      </Modal>


      {image && (
        <>
          <Image source={{ uri: image }} style={styles.image} />
          <TouchableOpacity style={[styles.button, styles.predictButton]} onPress={uploadAndPredict}>
            <Icon name="cloud-upload" size={50} color="#FFF" style={styles.icon} />
            <Text style={styles.buttonText}>Tahmin Et</Text>
          </TouchableOpacity>
        </>
      )}

      {result && (
        <View style={styles.resultCard}>
          <Text style={styles.resultText}>Sınıf: {result.predicted_class_name}</Text>
          <Text style={styles.resultText}>Güvenilirlik: {result.confidence.toFixed(2)}</Text>
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 20,
    backgroundColor: "#F0F4F8",
  },
  button: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "#5FC9C4",
    width: "80%",
    paddingVertical: 15,
    borderRadius: 10,
    marginBottom: 20,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 5,
    elevation: 3,
  },
  cameraButton: {
    backgroundColor: "#A47EDE",
  },
  predictButton: {
    backgroundColor: "#FF8C00",
    marginTop: 20,
  },
  icon: {
    marginRight: 10,
  },
  buttonText: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#FFF",
  },
  image: {
    width: 200,
    height: 200,
    marginTop: 20,
    borderRadius: 20,
  },
  resultCard: {
    marginTop: 20,
    padding: 15,
    backgroundColor: "#FFF",
    borderRadius: 10,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 5,
    elevation: 3,
    alignItems: "center",
    width: "80%",
  },
  resultText: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
  },

  infoButton: {
    position: "absolute",
    bottom: 50,
    right: 20,
    backgroundColor: "#FF8C00",
    width: 50,
    height: 50,
    justifyContent: "center",
    alignItems: "center",
    borderRadius: 25,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 5,
    elevation: 3,
  },
  modalContainer: {
    flex: 1,
    backgroundColor: "#FFF",
    marginTop: "30%",
    marginHorizontal: "5%",
    borderRadius: 20,
    padding: 20,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 10,
    elevation: 5,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: "bold",
    marginBottom: 20,
    textAlign: "center",
  },
  fruitItem: {
    flexDirection: "row",
    alignItems: "center",
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: "#E0E0E0",
  },
  fruitImage: {
    width: 40,
    height: 40,
    marginRight: 15,
  },
  fruitName: {
    fontSize: 16,
  },
  closeButton: {
    marginTop: 20,
    alignSelf: "center",
    backgroundColor: "#FF5C5C",
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 10,
  },
  closeButtonText: {
    color: "#FFF",
    fontSize: 16,
    fontWeight: "bold",
  },



});

export default Photo;




{image && (
  <>
    {/* Tahmin Et Butonu */}
    <TouchableOpacity
      style={[styles.button, styles.predictButton]}
      onPress={uploadAndPredict}
    >
      <Icon name="cloud-upload" size={50} color="#FFF" style={styles.icon} />
      <Text style={styles.buttonText}>Tahmin Et</Text>
    </TouchableOpacity>

    {/* Seçilen Resim */}
    <Image source={{ uri: image }} style={styles.image} />

    {/* Tahmin Sonuçları */}
    {result && (
      <View style={styles.resultCard}>
        <Text style={styles.resultText}>Sınıf: {result.predicted_class_name}</Text>
        <Text style={styles.resultText}>
          Güvenilirlik: {result.confidence.toFixed(2)}
        </Text>
      </View>
    )}
  </>
)}
