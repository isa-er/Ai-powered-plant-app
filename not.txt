APP .JS :

import { StatusBar } from 'expo-status-bar';
import { Button, StyleSheet, Text, TextInput, View, Alert} from 'react-native';
import { useState } from 'react';

import { db } from './firebase';
import { collection, addDoc } from 'firebase/firestore';
import { initializeApp } from 'firebase/app';
import {
  getAuth,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
} from 'firebase/auth';

import { doc, setDoc, getDoc } from 'firebase/firestore';

const auth = getAuth(); // Firebase Authentication


export default function App() {


  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [name, setName] = useState('');



  const handleSignUp = async () => {
    try {
      // Firebase Authentication ile kullanıcı kaydı
      const userCredential = await createUserWithEmailAndPassword(
        auth,
        email,
        password
      );
      const userId = userCredential.user.uid;

      // Firestore'daki "users" koleksiyonuna profil ekleme
      await setDoc(doc(db, 'users', userId), {
        email: email,
        name: name,
        createdAt: new Date(),
      });

      Alert.alert('Başarılı!', 'Kullanıcı kaydedildi ve profil oluşturuldu.');
      setEmail('');
      setPassword('');
      setName('');
    } catch (error) {
      console.error('Error signing up: ', error);
      Alert.alert('Hata!', error.message);
    }
  };




  
  const [isim, setisim] = useState('');
  // SADECE İSİM EKLEME-DENEME AMAÇLI
  const addUserToFirestore = async () => {
    try {
      // Firestore'daki "users" koleksiyonuna veri ekleme
      const docRef = await addDoc(collection(db, 'users'), {
        name: isim, // TextInput'tan alınan değer
        createdAt: new Date(), // Ek bilgi için tarih ekleyebilirsiniz
      });

      Alert.alert('Başarılı!', `Kullanıcı eklendi: ${docRef.id}`);
      setisim(''); // TextInput'u sıfırla
    } catch (error) {
      console.error('Error adding document: ', error);
      Alert.alert('Hata!', 'Kullanıcı eklenemedi.');
    }
  };



  const handleLogin = async () => {
    try {
      const userCredential = await signInWithEmailAndPassword(
        auth,
        email,
        password
      );
      const userId = userCredential.user.uid;

      // Firestore'dan kullanıcı profili çekme
      const userDoc = await getDoc(doc(db, 'users', userId));
      if (userDoc.exists()) {
        const userData = userDoc.data();
        Alert.alert(
          'Giriş Başarılı',
          `Hoş geldiniz, ${userData.name}! Email: ${userData.email}`
        );
      } else {
        Alert.alert('Hata!', 'Kullanıcı profili bulunamadı.');
      }

      setEmail('');
      setPassword('');
    } catch (error) {
      console.error('Error logging in: ', error);
      Alert.alert('Hata!', error.message);
    }
  };




  return (
    <View style={styles.container}>
      <TextInput
        style={{
          height: 40,
          borderColor: 'gray',
          borderWidth: 1,
          marginBottom: 10,
          paddingHorizontal: 10,
        }}
        placeholder="Adınızı girin"
        value={isim}
        onChangeText={text => setisim(text)} // Metni state'e kaydet
      />
      <Button title="Ekle" onPress={addUserToFirestore} />
      <StatusBar style="auto" />


      <TextInput
        style={{
          height: 40,
          borderColor: 'gray',
          borderWidth: 1,
          marginBottom: 10,
          paddingHorizontal: 10,
        }}
        placeholder="İsim"
        value={name}
        onChangeText={(text) => setName(text)}
      />
      <TextInput
        style={{
          height: 40,
          borderColor: 'gray',
          borderWidth: 1,
          marginBottom: 10,
          paddingHorizontal: 10,
        }}
        placeholder="Email"
        value={email}
        onChangeText={(text) => setEmail(text)}
      />
      <TextInput
        style={{
          height: 40,
          borderColor: 'gray',
          borderWidth: 1,
          marginBottom: 10,
          paddingHorizontal: 10,
        }}
        placeholder="Şifre"
        secureTextEntry
        value={password}
        onChangeText={(text) => setPassword(text)}
      />
      <Button title="Kayıt Ol" onPress={handleSignUp} />
      <View style={{ height: 10 }} />
      <Button title="Giriş Yap" onPress={handleLogin} />




    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});
******************************
SAFEAREA PROVIDER
import { StyleSheet, Text, View,StatusBar } from 'react-native'
import React from 'react'
import { SafeAreaView,SafeAreaProvider } from 'react-native-safe-area-context'

const Photo = () => {
  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Text>Home EKRANI GELDİ</Text>
      </SafeAreaView>
    </SafeAreaProvider>
  )
}

export default Photo

const styles = StyleSheet.create({
    container:{
        flex:1,
        backgroundColor:"yellow"
        
    }
})


****************** photo.js*************

import React, { useState } from "react";
import { View, Button, Image, Alert, StyleSheet, Text } from "react-native";
import * as ImagePicker from "expo-image-picker";

const Photo = () => {
  const [image, setImage] = useState(null);
  const [result, setResult] = useState(null);

  // Resim seçme işlemi
  const pickImage = async () => {
    // Galeriye erişim izni iste
    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
    if (status !== "granted") {
      Alert.alert(
        "Permission Denied",
        "We need access to your gallery to select an image."
      );
      return;
    }

    // Galeriden resim seç
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images, // Sadece resimleri seç
      allowsEditing: true, // Kullanıcıya kırpma seçeneği sun
      quality: 1, // Resim kalitesini koru
    });

    if (!result.canceled) {
      setImage(result.assets[0].uri); // Seçilen resmin URI'sini kaydet
    }
  };

  // Seçilen resmi API'ye gönder ve tahmin al
  const uploadImage = async () => {
    if (!image) {
      Alert.alert("No Image", "Please select an image first.");
      return;
    }

    const formData = new FormData();
    formData.append("file", {
      uri: image,
      name: "image.jpg",
      type: "image/jpeg",
    });

    try {
      const response = await fetch("https://fastapi-backend-3-q9m9.onrender.com/predict/", {
        method: "POST",
        body: formData,
        headers: {
          "Content-Type": "multipart/form-data",
        },
      });

      const result = await response.json();
      setResult(result);
    } catch (error) {
      console.error(error);
      Alert.alert("Error", "Failed to upload image.");
    }
  };

  return (
    <View style={styles.container}>
      <Button title="Select Image" onPress={pickImage} />
      {image && <Image source={{ uri: image }} style={styles.image} />}
      {image && <Button title="Upload & Predict" onPress={uploadImage} />}
      {result && (
        <View style={styles.resultContainer}>
          <Text style={styles.resultText}>
            Predicted Class: {result.predicted_class_name}
          </Text>
          <Text style={styles.resultText}>Confidence: {result.confidence}</Text>
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 20,
  },
  image: {
    width: 200,
    height: 200,
    marginVertical: 20,
  },
  resultContainer: {
    marginTop: 20,
    alignItems: "center",
  },
  resultText: {
    fontSize: 16,
    fontWeight: "bold",
  },
});

export default Photo;


********profile.js**********
import React from 'react';
import { View, Text, Button, StyleSheet, Alert } from 'react-native';
import { signOut } from 'firebase/auth';
import { auth } from '../../../firebase';

const Profile = () => {
  const handleSignOut = async () => {
    try {
      await signOut(auth); // Firebase çıkış işlemi
      Alert.alert('Çıkış Yapıldı', 'Başarıyla çıkış yaptınız!');
    } catch (error) {
      Alert.alert('Hata', 'Çıkış yapılırken bir hata oluştu.');
      console.error(error);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.text}>Profil Sayfası</Text>
      <Button title="Çıkış Yap" onPress={handleSignOut} />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'white',
  },
  text: {
    fontSize: 20,
    marginBottom: 20,
  },
});

export default Profile;
